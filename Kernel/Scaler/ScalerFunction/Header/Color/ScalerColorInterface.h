/********************************************************************************/
/*   Copyright (c) 2021 Realtek Semiconductor Corp. All rights reserved.        */
/*                                                                              */
/*   SPDX-License-Identifier: LicenseRef-Realtek-Proprietary                    */
/*                                                                              */
/*   This software component is confidential and proprietary to Realtek         */
/*   Semiconductor Corp. Disclosure, reproduction, redistribution, in whole     */
/*   or in part, of this work and its derivatives without express permission    */
/*   is prohibited.                                                             */
/********************************************************************************/

//----------------------------------------------------------------------------------------------------
// ID Code      : ScalerColorInterface.h No.0000
// Update Note  :
//----------------------------------------------------------------------------------------------------
//****************************************************************************
// DEFINITIONS / MACROS
//****************************************************************************
//--------------------------------------------------
// Bank for OGC/OCC/DICOM
//--------------------------------------------------
#if(_OCC_GAMMA_GEN_TYPE != _OCC_GAMMA_GEN_0)
#define _OCC_GAMMA_FLASH_BANK                          _FREESYNC_II_FLASH_BANK
#else
#define _OCC_GAMMA_FLASH_BANK                          _OGC_FLASH_BANK
#endif

//--------------------------------------------------
// Address for OGC/OCC/DICOM
//--------------------------------------------------
#define _OCC_LUT_MODE                                  _OFF
#define _OGC_OCC_BASIC_LENGTH                          ((_OGC_TOTAL_CT > 6 ? 0x500 : 0x400) * (_TWO_BRI_CALIBRATION_TYPE > _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 2 : 1))
#define _OGC_RGB_GAIN_TOTAL_SPACE                      (_OGC_TOTAL_CT > 6 ? 0x200 : 0x100)
#define _PANEL_EDID_TOTAL_SPACE                        0x10
#define _OGC_HDR10_NOTM_BOUND_TOTAL_SPACE              0x10 // LB_MSB, LB_LSB, UB_MSB, UB_LSB, PanelMaxLV_EDID_CV
#define _OGC_HDR10_NOTM_BOUND_SPACE                    0x04
#define _OGC_GAMMA_TABLE_SIZE                          ((_PCM_FULL_TIME_FUNCTION == _ON) ? 0x19D0UL : 0x1810UL) // _OGC_GAMMA_TABLE_LENGTH * 3
#define _OCC_GAMMA_TABLE_SIZE                          0x19D0UL // 2200*3 = 0x19C8
#define _OGC_RGB_GAIN_ACTUAL_SIZE                      (_OGC_TOTAL_GAMMA * _OGC_TOTAL_CT * 6)
#define _OGC_HDR10_IG_TABLE_SIZE                       ((_OCC_IG_NODE_1025_SUPPORT == _ON) ? 0x606 : 0xC5)
#define _OGC_HDR10_IG_129_NODE_TABLE_SIZE              0xC5
#define _OCC_HDR10_COLOR_MATRIX_SIZE                   0x50
#define _OGC_HDR10_NOTM_DCR_THD_SIZE                   0x10
#define _OGC_HDR10_NOTM_DCR_THD_LENGTH                 0x02
#define _CHECKSUM_TOTAL_SPACE                          0x50
#define _OCC_PANEL_COLOR_MAPPING_DATA_LENGTH           0x10
#define _OGC_USER_INFO_TOTAL_SPACE                     0x10
#define _OGC_HDR10_BACKLIGHT_ADAPTIVE_BOUND_LENGTH     0x0A
#define _OGC_HDR10_MASTERING_LV_STEPLESS_BOUND_LENGTH  0x0A

#define _OCC_COLOR_MATRIX_TOTAL_SPACE                  0x100UL // sRGB/Adobe/SoftProof/Userdefine/EBU/Rec709/DCI-P3/SMPTC/Userdefine2/Userdefine3/Userdefine4/Userdefine5/Userdefine6/DisplayP3
#define _OCC_COLORMATRIX_TABLE_SIZE                    (_OCC_LUT_MODE == _ON ? 312 : 18)
#define _FREESYNC_II_COLORMATRIX_TABLE_TOTAL_SIZE      0x20
#define _OGC_HEADER_LENGTH                             (4 + (_OGC_TOTAL_GAMMA + 1 + _OGC_TOTAL_CT + 1))
#define _OCC_HEADER_LENGTH                             5
#define _DICOM_HEADER_LENGTH                           5
#define _WHITE_LV_HEADER_LENGTH                        5
#define _OGCOCC_LV_RARIO_LENGTH                        ((_OGC_TOTAL_CT + 13) * 2)
#define _LOCAL_DIMMING_GAIN_LENGTH                     5

#define _OCC_GLOBAL_DIMMING_PWMLUT_TABLE_SIZE          4098 // 2049 * 2 Byte

#define _OGC_RGB_GAIN_ADDRESS                          (_OGC_CHKSUM_ADDRESS + _CHECKSUM_TOTAL_SPACE)
#define _OGC_RGB_GAIN_MAX_BRI_ADDRESS                  (_OGC_RGB_GAIN_ADDRESS + _OGC_RGB_GAIN_ACTUAL_SIZE)
#define _OGC_RGB_GAIN_MULTI_BRI_3_CAL_ADDRESS          (_OGC_RGB_GAIN_MAX_BRI_ADDRESS + _OGC_RGB_GAIN_ACTUAL_SIZE * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OGC_RGB_GAIN_MULTI_BRI_4_CAL_ADDRESS          (_OGC_RGB_GAIN_MULTI_BRI_3_CAL_ADDRESS + _OGC_RGB_GAIN_ACTUAL_SIZE * (_TWO_BRI_CALIBRATION_TYPE > _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OGC_HEADER_ADDRESS                            (_OGC_RGB_GAIN_MULTI_BRI_4_CAL_ADDRESS + _OGC_RGB_GAIN_ACTUAL_SIZE * (_TWO_BRI_CALIBRATION_TYPE > _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? (_MULTI_BRI_CALIBRATION_TYPE > _MULTI_BRI_THREE_CALIBRATION ? 1 : 0) : 0))
#define _OCC_HEADER_ADDRESS                            (_OGC_HEADER_ADDRESS + _OGC_HEADER_LENGTH)
#define _DICOM_HEADER_ADDRESS                          (_OCC_HEADER_ADDRESS + _OCC_HEADER_LENGTH)
#define _WHITE_LV_HEADER_ADDRESS                       (_DICOM_HEADER_ADDRESS + _DICOM_HEADER_LENGTH)

#define _EDID_INFO_ADDRESS                             (_OGC_RGB_GAIN_MULTI_BRI_4_CAL_ADDRESS + _OGC_RGB_GAIN_TOTAL_SPACE)
#define _DIMMING_NOTM_DCR_THD_ADDRESS                  (_EDID_INFO_ADDRESS + _PANEL_EDID_TOTAL_SPACE)
#define _DIMMING_NOTM_DCR_THD_FRAME_AVG_LV_ADDRESS     (_DIMMING_NOTM_DCR_THD_ADDRESS + _OGC_HDR10_NOTM_DCR_THD_LENGTH * _HDR10_USER_DEFINE_PANEL_MAX_LV_SUPPORT)
#define _DIMMING_NOTM_DCR_THD_USER_DEF_LV_ADDRESS      (_DIMMING_NOTM_DCR_THD_FRAME_AVG_LV_ADDRESS + _OGC_HDR10_NOTM_DCR_THD_LENGTH * _HDR10_USER_DEFINE_PANEL_MAX_LV_SUPPORT)
#define _OCC_PANEL_COLOR_MAPPING_DATA_ADDRESS          (_DIMMING_NOTM_DCR_THD_ADDRESS + _OGC_HDR10_NOTM_DCR_THD_SIZE)
#define _OGCOCC_LV_RARIO_ADDRESS                       (_OCC_PANEL_COLOR_MAPPING_DATA_ADDRESS + _OCC_PANEL_COLOR_MAPPING_DATA_LENGTH)
#define _LOCAL_DIMMING_GAIN_ADDRESS                    (_OGCOCC_LV_RARIO_ADDRESS + _OGCOCC_LV_RARIO_LENGTH) // Enable, Boost Gain, Boost Lv
//Basic Info End
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define _OCC_SRGBMATRIX_ADDRESS                        (_OGC_RGB_GAIN_ADDRESS + _OGC_OCC_BASIC_LENGTH)
#define _OCC_ADOBEMATRIX_ADDRESS                       (_OCC_SRGBMATRIX_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_USERDEFINE_ADDRESS                        (_OCC_ADOBEMATRIX_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_EBU_ADDRESS                               (_OCC_USERDEFINE_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_SOFTPROOF_ADDRESS                         (_OCC_USERDEFINE_ADDRESS)
#define _OCC_REC709_ADDRESS                            (_OCC_EBU_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_DCIP3_ADDRESS                             (_OCC_REC709_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_SMPTEC_ADDRESS                            (_OCC_DCIP3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_USERDEFINE2_ADDRESS                       (_OCC_SMPTEC_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_USERDEFINE3_ADDRESS                       (_OCC_USERDEFINE2_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_USERDEFINE4_ADDRESS                       (_OCC_USERDEFINE3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_USERDEFINE5_ADDRESS                       (_OCC_USERDEFINE4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_USERDEFINE6_ADDRESS                       (_OCC_USERDEFINE5_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_DISPLAYP3_ADDRESS                         (_OCC_USERDEFINE6_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_IPANEL_ADDRESS                            (_OCC_DISPLAYP3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION)

#define _OCC_SRGBMATRIX_MAX_BRI_ADDRESS                (_OCC_SRGBMATRIX_ADDRESS + _OCC_COLOR_MATRIX_TOTAL_SPACE * _OCC_FUNCTION)
#define _OCC_ADOBEMATRIX_MAX_BRI_ADDRESS               (_OCC_SRGBMATRIX_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_USERDEFINE_MAX_BRI_ADDRESS                (_OCC_ADOBEMATRIX_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_EBU_MAX_BRI_ADDRESS                       (_OCC_USERDEFINE_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_SOFTPROOF_MAX_BRI_ADDRESS                 (_OCC_USERDEFINE_MAX_BRI_ADDRESS)
#define _OCC_REC709_MAX_BRI_ADDRESS                    (_OCC_EBU_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_DCIP3_MAX_BRI_ADDRESS                     (_OCC_REC709_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_SMPTEC_MAX_BRI_ADDRESS                    (_OCC_DCIP3_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_USERDEFINE2_MAX_BRI_ADDRESS               (_OCC_SMPTEC_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_USERDEFINE3_MAX_BRI_ADDRESS               (_OCC_USERDEFINE2_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_USERDEFINE4_MAX_BRI_ADDRESS               (_OCC_USERDEFINE3_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_USERDEFINE5_MAX_BRI_ADDRESS               (_OCC_USERDEFINE4_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_USERDEFINE6_MAX_BRI_ADDRESS               (_OCC_USERDEFINE5_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_DISPLAYP3_MAX_BRI_ADDRESS                 (_OCC_USERDEFINE6_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_IPANEL_MAX_BRI_ADDRESS                    (_OCC_DISPLAYP3_MAX_BRI_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))

#define _OCC_SRGBMATRIX_MULTI_BRI_3_ADDRESS            (_OCC_SRGBMATRIX_MAX_BRI_ADDRESS + _OCC_COLOR_MATRIX_TOTAL_SPACE * _OCC_FUNCTION * (_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR ? 1 : 0))
#define _OCC_ADOBEMATRIX_MULTI_BRI_3_ADDRESS           (_OCC_SRGBMATRIX_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE_MULTI_BRI_3_ADDRESS            (_OCC_ADOBEMATRIX_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_EBU_MULTI_BRI_3_ADDRESS                   (_OCC_USERDEFINE_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_SOFTPROOF_MULTI_BRI_3_ADDRESS             (_OCC_USERDEFINE_MULTI_BRI_3_ADDRESS)
#define _OCC_REC709_MULTI_BRI_3_ADDRESS                (_OCC_EBU_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_DCIP3_MULTI_BRI_3_ADDRESS                 (_OCC_REC709_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_SMPTEC_MULTI_BRI_3_ADDRESS                (_OCC_DCIP3_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE2_MULTI_BRI_3_ADDRESS           (_OCC_SMPTEC_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE3_MULTI_BRI_3_ADDRESS           (_OCC_USERDEFINE2_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE4_MULTI_BRI_3_ADDRESS           (_OCC_USERDEFINE3_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE5_MULTI_BRI_3_ADDRESS           (_OCC_USERDEFINE4_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE6_MULTI_BRI_3_ADDRESS           (_OCC_USERDEFINE5_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_DISPLAYP3_MULTI_BRI_3_ADDRESS             (_OCC_USERDEFINE6_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_IPANEL_MULTI_BRI_3_ADDRESS                (_OCC_DISPLAYP3_MULTI_BRI_3_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))

#define _OCC_SRGBMATRIX_MULTI_BRI_4_ADDRESS            (_OCC_SRGBMATRIX_MULTI_BRI_3_ADDRESS + _OCC_COLOR_MATRIX_TOTAL_SPACE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _OCC_ADOBEMATRIX_MULTI_BRI_4_ADDRESS           (_OCC_SRGBMATRIX_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE_MULTI_BRI_4_ADDRESS            (_OCC_ADOBEMATRIX_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_EBU_MULTI_BRI_4_ADDRESS                   (_OCC_USERDEFINE_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_SOFTPROOF_MULTI_BRI_4_ADDRESS             (_OCC_USERDEFINE_MULTI_BRI_4_ADDRESS)
#define _OCC_REC709_MULTI_BRI_4_ADDRESS                (_OCC_EBU_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_DCIP3_MULTI_BRI_4_ADDRESS                 (_OCC_REC709_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_SMPTEC_MULTI_BRI_4_ADDRESS                (_OCC_DCIP3_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE2_MULTI_BRI_4_ADDRESS           (_OCC_SMPTEC_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE3_MULTI_BRI_4_ADDRESS           (_OCC_USERDEFINE2_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE4_MULTI_BRI_4_ADDRESS           (_OCC_USERDEFINE3_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE5_MULTI_BRI_4_ADDRESS           (_OCC_USERDEFINE4_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_USERDEFINE6_MULTI_BRI_4_ADDRESS           (_OCC_USERDEFINE5_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_DISPLAYP3_MULTI_BRI_4_ADDRESS             (_OCC_USERDEFINE6_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_IPANEL_MULTI_BRI_4_ADDRESS                (_OCC_DISPLAYP3_MULTI_BRI_4_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))

#define _OCC_HDR10_SRGB_MATRIX_ADDRESS                 (_OCC_SRGBMATRIX_MULTI_BRI_4_ADDRESS + _OCC_COLOR_MATRIX_TOTAL_SPACE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#define _OCC_HDR10_ADOBE_MATRIX_ADDRESS                (_OCC_HDR10_SRGB_MATRIX_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _HDR10_SUPPORT)
#define _OCC_HDR10_DCIP3_D65_MATRIX_ADDRESS            (_OCC_HDR10_ADOBE_MATRIX_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _HDR10_SUPPORT)
#define _OCC_HDR10_BT2020_MATRIX_ADDRESS               (_OCC_HDR10_DCIP3_D65_MATRIX_ADDRESS + _OCC_COLORMATRIX_TABLE_SIZE * _HDR10_SUPPORT)

#define _OGC_HDR10_IG_1200_NOR_ADDRESS                 (_OCC_HDR10_SRGB_MATRIX_ADDRESS + _OCC_HDR10_COLOR_MATRIX_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_1200_DARK_ADDRESS                (_OGC_HDR10_IG_1200_NOR_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_4000_NOR_ADDRESS                 (_OGC_HDR10_IG_1200_DARK_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_4000_DARK_ADDRESS                (_OGC_HDR10_IG_4000_NOR_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_10000_NOR_ADDRESS                (_OGC_HDR10_IG_4000_DARK_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_10000_DARK_ADDRESS               (_OGC_HDR10_IG_10000_NOR_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_540_NOR_ADDRESS                  (_OGC_HDR10_IG_10000_DARK_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_540_DARK_ADDRESS                 (_OGC_HDR10_IG_540_NOR_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)

#define _OGC_HDR10_IG_NOTM_NOR_ADDRESS                 (_OGC_HDR10_IG_540_DARK_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_NOTM_DARK_ADDRESS                (_OGC_HDR10_IG_NOTM_NOR_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_NOTM_PEAK_NOR_ADDRESS            (_OGC_HDR10_IG_NOTM_DARK_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_NOTM_PEAK_DARK_ADDRESS           (_OGC_HDR10_IG_NOTM_PEAK_NOR_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)

#define _OGC_HDR10_IG_540_FIXED_POINT_NOR_ADDRESS      (_OGC_HDR10_IG_NOTM_PEAK_DARK_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_SUPPORT)
#define _OGC_HDR10_IG_540_FIXED_POINT_DARK_ADDRESS     (_OGC_HDR10_IG_540_FIXED_POINT_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_1200_FIXED_POINT_NOR_ADDRESS     (_OGC_HDR10_IG_540_FIXED_POINT_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_1200_FIXED_POINT_DARK_ADDRESS    (_OGC_HDR10_IG_1200_FIXED_POINT_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_4000_FIXED_POINT_NOR_ADDRESS     (_OGC_HDR10_IG_1200_FIXED_POINT_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_4000_FIXED_POINT_DARK_ADDRESS    (_OGC_HDR10_IG_4000_FIXED_POINT_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_10000_FIXED_POINT_NOR_ADDRESS    (_OGC_HDR10_IG_4000_FIXED_POINT_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_10000_FIXED_POINT_DARK_ADDRESS   (_OGC_HDR10_IG_10000_FIXED_POINT_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)

#define _OGC_HDR10_IG_NOTM_USER_DEF_PEAK_NOR_ADDRESS   (_OGC_HDR10_IG_10000_FIXED_POINT_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_NOTM_USER_DEF_PEAK_DARK_ADDRESS  (_OGC_HDR10_IG_NOTM_USER_DEF_PEAK_NOR_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_USER_DEFINE_PANEL_MAX_LV_SUPPORT)
#define _OGC_HDR10_IG_NOTM_DISPLAY_HDR_1_1_ADDRESS     (_OGC_HDR10_IG_NOTM_USER_DEF_PEAK_DARK_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _HDR10_USER_DEFINE_PANEL_MAX_LV_SUPPORT)

#define _OGC_HDR10_IG_ADAPTIVE_TM_LV1_NOR_ADDRESS      (_OGC_HDR10_IG_NOTM_DISPLAY_HDR_1_1_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * (_DISPLAY_HDR_VERSION == _DISPLAY_HDR_VERSION_1_1 ? 1 : 0))
#define _OGC_HDR10_IG_ADAPTIVE_TM_LV1_DARK_ADDRESS     (_OGC_HDR10_IG_ADAPTIVE_TM_LV1_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)
#define _OGC_HDR10_IG_ADAPTIVE_TM_LV2_NOR_ADDRESS      (_OGC_HDR10_IG_ADAPTIVE_TM_LV1_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)
#define _OGC_HDR10_IG_ADAPTIVE_TM_LV2_DARK_ADDRESS     (_OGC_HDR10_IG_ADAPTIVE_TM_LV2_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)
#define _OGC_HDR10_IG_ADAPTIVE_TM_LV3_NOR_ADDRESS      (_OGC_HDR10_IG_ADAPTIVE_TM_LV2_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)
#define _OGC_HDR10_IG_ADAPTIVE_TM_LV3_DARK_ADDRESS     (_OGC_HDR10_IG_ADAPTIVE_TM_LV3_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)
#define _OGC_HDR10_IG_ADAPTIVE_TM_LV4_NOR_ADDRESS      (_OGC_HDR10_IG_ADAPTIVE_TM_LV3_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)
#define _OGC_HDR10_IG_ADAPTIVE_TM_LV4_DARK_ADDRESS     (_OGC_HDR10_IG_ADAPTIVE_TM_LV4_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)

#define _OGC_HDR10_IG_540_USER_FIXED_NOR_ADDRESS       (_OGC_HDR10_IG_ADAPTIVE_TM_LV4_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)
#define _OGC_HDR10_IG_540_USER_FIXED_DARK_ADDRESS      (_OGC_HDR10_IG_540_USER_FIXED_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_1200_USER_FIXED_NOR_ADDRESS      (_OGC_HDR10_IG_540_USER_FIXED_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_1200_USER_FIXED_DARK_ADDRESS     (_OGC_HDR10_IG_1200_USER_FIXED_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_4000_USER_FIXED_NOR_ADDRESS      (_OGC_HDR10_IG_1200_USER_FIXED_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_4000_USER_FIXED_DARK_ADDRESS     (_OGC_HDR10_IG_4000_USER_FIXED_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_10000_USER_FIXED_NOR_ADDRESS     (_OGC_HDR10_IG_4000_USER_FIXED_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)
#define _OGC_HDR10_IG_10000_USER_FIXED_DARK_ADDRESS    (_OGC_HDR10_IG_10000_USER_FIXED_NOR_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)

#define _OGC_ADVANCED_HDR10_IG_NOTM_DARK_ADDRESS       (_OGC_HDR10_IG_10000_USER_FIXED_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * _HDR10_USER_DEFINE_FIXED_POINT_TONEMAPPING_SUPPORT)

#define _OGC_HDR10_NOTM_BOUND_ADDRESS                  (_OGC_ADVANCED_HDR10_IG_NOTM_DARK_ADDRESS + _OGC_HDR10_IG_129_NODE_TABLE_SIZE * 40 * _ADVANCED_HDR10_SUPPORT)
#define _OGC_HDR10_NOTM_BOUND_FRAME_AVG_LV_ADDRESS     (_OGC_HDR10_NOTM_BOUND_ADDRESS + _OGC_HDR10_NOTM_BOUND_SPACE * _HDR10_USER_DEFINE_PANEL_MAX_LV_SUPPORT)
#define _OGC_HDR10_NOTM_BOUND_USER_DEF_LV_ADDRESS      (_OGC_HDR10_NOTM_BOUND_FRAME_AVG_LV_ADDRESS + _OGC_HDR10_NOTM_BOUND_SPACE * _HDR10_USER_DEFINE_PANEL_MAX_LV_SUPPORT)


#define _OGC_HDR10_BACKLIGHT_ADAPTIVE_BOUND_ADDRESS    (_OGC_HDR10_NOTM_BOUND_ADDRESS + _OGC_HDR10_NOTM_BOUND_TOTAL_SPACE * _HDR10_SUPPORT)
#define _OGC_HDR10_MASTERING_LV_STEPLESS_BOUND_ADDRESS (_OGC_HDR10_BACKLIGHT_ADAPTIVE_BOUND_ADDRESS + _OGC_HDR10_BACKLIGHT_ADAPTIVE_BOUND_LENGTH * _HDR10_BACKLIGHT_ADAPTIVE_TM_SUPPORT)

#define _DIMMING_OGC_GAMMA1_ADDRESS                    (_OGC_HDR10_MASTERING_LV_STEPLESS_BOUND_ADDRESS + _OGC_HDR10_MASTERING_LV_STEPLESS_BOUND_LENGTH * _HDR10_MASTERING_LV_STEPLESS_TM_SUPPORT)
#define _DIMMING_OGC_GAMMA2_ADDRESS                    (_DIMMING_OGC_GAMMA1_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _BACKLIGHT_DIMMING_SUPPORT * (_OGC_TOTAL_GAMMA > 1 ? 1 : 0))
#define _DIMMING_OGC_GAMMA3_ADDRESS                    (_DIMMING_OGC_GAMMA2_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _BACKLIGHT_DIMMING_SUPPORT * (_OGC_TOTAL_GAMMA > 2 ? 1 : 0))
#define _DIMMING_OGC_GAMMA4_ADDRESS                    (_DIMMING_OGC_GAMMA3_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _BACKLIGHT_DIMMING_SUPPORT * (_OGC_TOTAL_GAMMA > 3 ? 1 : 0))
#define _DIMMING_OGC_GAMMA5_ADDRESS                    (_DIMMING_OGC_GAMMA4_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _BACKLIGHT_DIMMING_SUPPORT * (_OGC_TOTAL_GAMMA > 4 ? 1 : 0))
#define _DIMMING_OGC_GAMMA6_ADDRESS                    (_DIMMING_OGC_GAMMA5_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _BACKLIGHT_DIMMING_SUPPORT * (_OGC_TOTAL_GAMMA > 5 ? 1 : 0))

#define _DIMMING_OGC_RGB_GAIN_ADDRESS                  (_DIMMING_OGC_GAMMA6_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _BACKLIGHT_DIMMING_SUPPORT)

//--------------------------------------------------
// Address for FREESYNCII Mode
//--------------------------------------------------
#define _FREESYNC_II_OCC_GAMMA10_ADDRESS               (_FREESYNC_II_CHKSUM_ADDRESS + 0x10)

#define _FREESYNC_II_PANEL_NATIVE_MATRIX_ADDRESS       (_FREESYNC_II_OCC_GAMMA10_ADDRESS + _OCC_GAMMA_TABLE_SIZE * _FREESYNC_II_SUPPORT)

#define _FREESYNC_II_IG_SRGB_ADDRESS                   (_FREESYNC_II_PANEL_NATIVE_MATRIX_ADDRESS + _FREESYNC_II_COLORMATRIX_TABLE_TOTAL_SIZE * _FREESYNC_II_SUPPORT)
#define _FREESYNC_II_IG_BT709_ADDRESS                  (_FREESYNC_II_IG_SRGB_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _FREESYNC_II_SUPPORT)
#define _FREESYNC_II_IG_GAMMA22_ADDRESS                (_FREESYNC_II_IG_BT709_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _FREESYNC_II_SUPPORT)
#define _FREESYNC_II_IG_GAMMA26_ADDRESS                (_FREESYNC_II_IG_GAMMA22_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _FREESYNC_II_SUPPORT)
#define _FREESYNC_II_IG_PQINTERIM_ADDRESS              (_FREESYNC_II_IG_GAMMA26_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _FREESYNC_II_SUPPORT)
#define _FREESYNC_II_IG_PQ_ADDRESS                     (_FREESYNC_II_IG_PQINTERIM_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _FREESYNC_II_SUPPORT)

#define _DISP_CALIBRATION_TOTAL_END2                   (_FREESYNC_II_IG_PQ_ADDRESS + _OGC_HDR10_IG_TABLE_SIZE * _FREESYNC_II_SUPPORT)
//#define _DISP_CALIBRATION_TOTAL_SPACE2                 (_DISP_CALIBRATION_TOTAL_END2 - _FREESYNC_II_OCC_GAMMA10_ADDRESS)

//--------------------------------------------------
// Address for OCC/HLG
//--------------------------------------------------
#define _OGC_NONE_ADDRESS                              0
#if(_OCC_GAMMA_GEN_TYPE == _OCC_GAMMA_GEN_0)
#define _OCC_GAMMA10_ADDRESS                           (_DIMMING_OGC_RGB_GAIN_ADDRESS + _OGC_RGB_GAIN_ACTUAL_SIZE * _BACKLIGHT_DIMMING_SUPPORT)
#else
#define _OCC_GAMMA10_ADDRESS                           _DISP_CALIBRATION_TOTAL_END2
#endif

#define _OCC_HDR10_GAMMA10_ADDRESS                     ((_TWO_BRI_CALIBRATION_TYPE != _TWO_BRI_CALIBRATION_NONE) ? (_OCC_GAMMA10_ADDRESS + _OCC_GAMMA_TABLE_SIZE * _OCC_FUNCTION) : _OCC_GAMMA10_ADDRESS)
#define _OCC_GAMMA10_MAX_BRI_ADDRESS                   ((_TWO_BRI_CALIBRATION_TYPE >= _TWO_BRI_CALIBRATION_OGC_OCC_DICOM_HDR) ? (_OCC_GAMMA10_ADDRESS + _OCC_GAMMA_TABLE_SIZE * _OCC_FUNCTION) : _OCC_GAMMA10_ADDRESS)

#define _OCC_GAMMA10_MULTI_BRI_3_ADDRESS               (_OCC_HDR10_GAMMA10_ADDRESS + _OCC_GAMMA_TABLE_SIZE * _OCC_FUNCTION)
#define _OCC_GAMMA10_MULTI_BRI_4_ADDRESS               (_OCC_GAMMA10_MULTI_BRI_3_ADDRESS + _OCC_GAMMA_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_THREE_CALIBRATION ? 1 : 0))
#define _DIMMING_OCC_GAMMA10_ADDRESS                   (_OCC_GAMMA10_MULTI_BRI_4_ADDRESS + _OCC_GAMMA_TABLE_SIZE * _OCC_FUNCTION * (_MULTI_BRI_CALIBRATION_TYPE >= _MULTI_BRI_FOUR_CALIBRATION ? 1 : 0))
#if(_OCC_GAMMA_GEN_TYPE == _OCC_GAMMA_GEN_0)
#define _OGC_HLG_YM_STANDARD_MODE_ADDRESS              (_DIMMING_OCC_GAMMA10_ADDRESS + _OCC_GAMMA_TABLE_SIZE * _BACKLIGHT_DIMMING_SUPPORT)
#else
#define _OGC_HLG_YM_STANDARD_MODE_ADDRESS              (_DIMMING_OGC_RGB_GAIN_ADDRESS + _OGC_RGB_GAIN_ACTUAL_SIZE * _BACKLIGHT_DIMMING_SUPPORT)
#endif

#define _OCC_GLOBAL_DIMMING_PWMLUT_ADDRESS             (_OGC_HLG_YM_STANDARD_MODE_ADDRESS + _YMAPPING_GAIN_TABLE_SIZE * _HLG_SUPPORT)
#define _DISP_CALIBRATION_PCM_END                      (_OCC_GLOBAL_DIMMING_PWMLUT_ADDRESS + _OCC_GLOBAL_DIMMING_PWMLUT_TABLE_SIZE * _GLOBAL_DIMMING_ONLINE_CALIBRATION_SUPPORT)

//--------------------------------------------------
// Macro of DCR Ready Flag
//--------------------------------------------------
#define GET_DCR_READY_STATUS()                         (g_bColorDCRReadyStatus)
#define SET_DCR_READY_STATUS()                         (g_bColorDCRReadyStatus = _TRUE)
#define CLR_DCR_READY_STATUS()                         (g_bColorDCRReadyStatus = _FALSE)

//--------------------------------------------------
// Macro of DCC Ready Flag
//--------------------------------------------------
#define GET_DCC_READY_STATUS()                         (g_bColorDCCReadyStatus)
#define SET_DCC_READY_STATUS()                         (g_bColorDCCReadyStatus = _TRUE)
#define CLR_DCC_READY_STATUS()                         (g_bColorDCCReadyStatus = _FALSE)

//--------------------------------------------------
// Definitions of 3DLUT Option
//--------------------------------------------------
#define _RGB_3D_GAMMA_1TABLE_SIZE                      29478 // 17*17*17*3*2bytes
#define _RGB_3D_GAMMA_FINISH_ADDRESS                   0
#define _RGB_3D_GAMMA_OCC_START_ADDRESS                16

//--------------------------------------------------
// Address for Panel Uniformity
//--------------------------------------------------
#define _UNIFORMITY_FINISH_ADDRESS                     0 // _UNIFORMITY_GAIN_FINISH_ADDRESS
#define _UNIFORMITY_OFFSET_FINISH_ADDRESS              0

//--------------------------------------------------
// Macro of Local Dimming
//--------------------------------------------------
#if(_COLOR_IP_LOCAL_DIMMING == _ON)
#define GET_LOCAL_DIMMING_FW_PROCESS_STAGE()           (g_stColorLocalDimmingFWCtrl.enumColorLocalDimmingProcessStage)
#define SET_LOCAL_DIMMING_FW_PROCESS_STAGE(x)          (g_stColorLocalDimmingFWCtrl.enumColorLocalDimmingProcessStage = (x))
#define GET_LOCAL_DIMMING_HISTOGRAM_DONE()             (g_stColorLocalDimmingFWCtrl.b1ColorSmoothReadyFlag)
#define SET_LOCAL_DIMMING_HISTOGRAM_DONE(x)            (g_stColorLocalDimmingFWCtrl.b1ColorSmoothReadyFlag = (x))
#define GET_LOCAL_DIMMING_BLMODEL_POLLING_COUNT()      (g_stColorLocalDimmingFWCtrl.ucColorLocalDimmingBLPollingTime)
#define SET_LOCAL_DIMMING_BLMODEL_POLLING_COUNT(x)     (g_stColorLocalDimmingFWCtrl.ucColorLocalDimmingBLPollingTime = (x))
#endif

//--------------------------------------------------
// Definitions of Ymapping Option
//--------------------------------------------------
#define _YMAPPING_GAIN_TABLE_SIZE                      710
#define _YMAPPING_MAX_GAIN_ADDR                        355

//--------------------------------------------------
#if(_COLOR_IP_LOCAL_CONTRAST == _ON)
#if(_COLOR_IP_LOCAL_CONTRAST_HISTOGRAM == _ON)
#define GET_LOCAL_CONTRAST_READY_TOREAD()              (g_bColorLocalContrastReadyReadStatus)
#define SET_LOCAL_CONTRAST_READY_TOREAD()              (g_bColorLocalContrastReadyReadStatus = _TRUE)
#define CLR_LOCAL_CONTRAST_READY_TOREAD()              (g_bColorLocalContrastReadyReadStatus = _FALSE)
#endif
#endif
// Macro of HDR
//--------------------------------------------------
#if(_ULTRA_HDR_SUPPORT == _ON)
#define GET_HDR_TARGET_STATUS(region)                  (g_penumColorHDRTargrtStatus[ScalerRegionGetIndex(region)])
#define SET_HDR_TARGET_STATUS(region, x)               (g_penumColorHDRTargrtStatus[ScalerRegionGetIndex(region)] = (x))
#endif

#if(_ADVANCED_HDR10_SUPPORT == _ON)
//--------------------------------------------------
// Definitions of HDR10+ VSIF OUI
//--------------------------------------------------
#define _ADVANCED_HDR10_OUI                            0x8B8490

//--------------------------------------------------
// Definitions of DHDR Metadata
//--------------------------------------------------
#if(_ADVANCED_HDR10_DHDR_SUPPORT == _ON)
#define _ADVANCED_HDR10_DHDR_CONTRY_CODE               0xB5
#define _ADVANCED_HDR10_DHDR_PROVIDER_CODE             0x003C
#define _ADVANCED_HDR10_DHDR_PROVIDER_ORIENTTED_CODE   0x0001
#define _ADVANCED_HDR10_DHDR_APP_IDENTIFIER            0x04
#define _ADVANCED_HDR10_DHDR_APP_VERSION               0x01
#define _ADVANCED_HDR10_DHDR_INFO_TYPE                 0x0004
#endif
#endif

#if(_DYNAMIC_LOWBLUE_FUNCTION == _ON)
//--------------------------------------------------
// Definitions of Dynamic LowBlue Data
//--------------------------------------------------
#define _DYNAMIC_LOWBLUE_UNIFORMITY_NODE_NUM           (612) // for maximum 4k 4096*2160, node = 34 * 18
#define _DYNAMIC_LOWBLUE_UNIFORMITY_HOR_INTERVAL       (128)
#define _DYNAMIC_LOWBLUE_UNIFORMITY_VER_INTERVAL       _DYNAMIC_LOWBLUE_UNIFORMITY_HOR_INTERVAL
#define _DYNAMIC_LOWBLUE_UNIFORMITY_HOR_GRIDS          (WORD)((_PANEL_DH_WIDTH / _DYNAMIC_LOWBLUE_UNIFORMITY_HOR_INTERVAL) + 2)
#define _DYNAMIC_LOWBLUE_UNIFORMITY_VER_GRIDS          (WORD)((_PANEL_DV_HEIGHT / _DYNAMIC_LOWBLUE_UNIFORMITY_VER_INTERVAL) + 2)
#define _DYNAMIC_LOWBLUE_UNIFORMITY_HOR_OFFSET         (WORD)(((_DYNAMIC_LOWBLUE_UNIFORMITY_HOR_GRIDS - 1) * _DYNAMIC_LOWBLUE_UNIFORMITY_HOR_INTERVAL - _PANEL_DH_WIDTH) / 2)
#define _DYNAMIC_LOWBLUE_UNIFORMITY_VER_OFFSET         (WORD)(((_DYNAMIC_LOWBLUE_UNIFORMITY_VER_GRIDS - 1) * _DYNAMIC_LOWBLUE_UNIFORMITY_VER_INTERVAL - _PANEL_DV_HEIGHT) / 2)

#define _LOWBLUE_MRCM_HOR_DIVISION                     8
#define _LOWBLUE_MRCM_VER_DIVISION                     6
#endif
//--------------------------------------------------
// Definitions of local dimming sub region
//--------------------------------------------------
#define _LOCAL_DIMMING_PANEL_REGION_HORIZONTAL_UP      ((((32 % _LOCAL_DIMMING_PANEL_REGION_HORIZONTAL) == 0) && (_LOCAL_DIMMING_PANEL_REGION_HORIZONTAL < 32)) ? 32 :\
                                                       (_LOCAL_DIMMING_PANEL_REGION_HORIZONTAL * (32 / _LOCAL_DIMMING_PANEL_REGION_HORIZONTAL) > 32) ? 32 :\
                                                       (_LOCAL_DIMMING_PANEL_REGION_HORIZONTAL * (32 / _LOCAL_DIMMING_PANEL_REGION_HORIZONTAL)))

#define _LOCAL_DIMMING_PANEL_REGION_VERTICAL_UP        ((((4 % _LOCAL_DIMMING_PANEL_REGION_VERTICAL) == 0) && (_LOCAL_DIMMING_PANEL_REGION_VERTICAL < 4)) ? 4 : _LOCAL_DIMMING_PANEL_REGION_VERTICAL)

#define _LOCAL_DIMMING_TOTAL_REGION_UP                 (_LOCAL_DIMMING_PANEL_REGION_VERTICAL_UP * _LOCAL_DIMMING_PANEL_REGION_HORIZONTAL_UP)


//****************************************************************************
// STRUCT / TYPE / ENUM DEFINITTIONS
//****************************************************************************
//--------------------------------------------------
// Enumerations of IDither Conversion Type
//--------------------------------------------------
typedef enum
{
    _IDITHER_12_TO_8,
    _IDITHER_12_TO_10,
}EnumIDitherConvType;

//--------------------------------------------------
// Definitions of Advanced HDR10 Enlarge Delay Status
//--------------------------------------------------
typedef enum
{
    _ADVANCED_HDR10_ENLARGE_DELAY_NO_SUPPORT = 0x00,
    _ADVANCED_HDR10_ENLARGE_DELAY_SUPPORT,
} EnumAdvancedHDR10EnlargeDelaySupport;

//--------------------------------------------------
// Definitions of Advanced HDR10 Enlarge Delay Status
//--------------------------------------------------
typedef enum
{
    _ADVANCED_HDR10_ENLARGE_DELAY_OFF = 0x00,
    _ADVANCED_HDR10_ENLARGE_DELAY_ON,
} EnumAdvancedHDR10EnlargeDelayStatus;

//--------------------------------------------------
// Enumerations of Highlight Window ON/OFF Status
//--------------------------------------------------
typedef enum
{
    _HLW_OFF,
    _HLW_ON,
} EnumHLWStatus;

//--------------------------------------------------
// Enumerations of Local Dimming Smooth Pattern Mode
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_SMOOTH_NORMAL_PATTERN,
    _LOCAL_DIMMING_SMOOTH_CORNER_PATTERN,
} EnumLDPWMSmoothPattern;

//--------------------------------------------------
// Enumerations of Local Dimming BL Model Mode
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_BLMODEL_HW_MODE,
    _LOCAL_DIMMING_BLMODEL_MANUAL_MODE,
    _LOCAL_DIMMING_BLMODEL_FW_MODE,
    _LOCAL_DIMMING_BLMODEL_PSEUDO_MODE,
} EnumLDBLModelMode;

//--------------------------------------------------
// Enumerations of HDR Info Change Bit Polling
//--------------------------------------------------
typedef enum
{
    _HDR_INFO_CHG_POLLING_CHECK_DISABLE = 0,
    _HDR_INFO_CHG_POLLING_CHECK_ENABLE,
} EnumHDRInfoChgPolling;

//--------------------------------------------------
// Structure of Kernel HLW
//--------------------------------------------------
typedef struct
{
    StructHLWSetting stHLWSetting;
} StructColorHLWSetting;

//--------------------------------------------------
// Structure of Kernel BorderWindow
//--------------------------------------------------
typedef struct
{
    StructBorderWindowSetting stBorderWindowSetting;
} StructColorBorderWindowSetting;

//--------------------------------------------------
// Structure of Kernel UltraVivid
//--------------------------------------------------
typedef struct
{
    StructUltraVividSetting stUltraVividSetting;
} StructColorUltraVividSetting;

//--------------------------------------------------
// Structure of Kernel Sharpness
//--------------------------------------------------
typedef struct
{
    StructSharpnessSetting stSharpnessSetting;
} StructColorSharpnessSetting;

typedef struct
{
    StructScalingDownCoefSetting stScalingDownCoefSetting;
} StructColorScalingDownCoefSetting;

//--------------------------------------------------
// Structure of Kernel Local Contrast
//--------------------------------------------------
typedef struct
{
    BYTE ucBank;
    BYTE *pucTable;
    BYTE ucYdiffdevisor;
}StructKernelLocalContrastHDR10Data;

typedef struct
{
    BYTE ucYdiffdevisor;
}StructKernelLocalContrastUserData;


typedef union
{
    StructKernelLocalContrastHDR10Data stKernelLocalContrastHDR10Data;
    StructKernelLocalContrastUserData stKernelLocalContrastUserData;
}UnionKernelLocalContrastData;

typedef struct
{
    bit bReadEnable;
}StructKernelLocalContrastReadYavgData;

typedef struct
{
    BYTE ucBank;
    BYTE *pucTable;
}StructKernelLocalContrastTemporalData;

typedef struct
{
    EnumLocalContrastTemporalMode enumLocalContrastTemporalMode;
}StructKernelLocalContrastTemporalMode;

typedef union
{
    StructKernelLocalContrastTemporalMode stKernelLocalContrastTemporalMode;
}UnionKernelLocalContrastTemporalMode;

typedef union
{
    StructKernelLocalContrastTemporalData stKernelLocalContrastTemporalData;
}UnionKernelLocalContrastTemporalData;

typedef struct
{
    StructLocalContrastSetting stLocalContrastSetting;
    UnionKernelLocalContrastData unKernelLocalContrastData;
}StructColorLocalContrastSetting;

typedef struct
{
    StructLocalContrastTemporalSetting stLocalContrastTemporalSetting;
    UnionKernelLocalContrastTemporalData unKernelLocalContrastTemporalData;
    UnionKernelLocalContrastTemporalMode unKernelLocalContrastTemporalMode;
}StructColorLocalContrastTemporalSetting;


typedef struct
{
    BYTE ucHblknum;
    BYTE ucHblksize;
    BYTE ucBlksize_over;
}StructColorLocalContrastHblkSetting;

typedef struct
{
    BYTE ucVblknum;
    BYTE ucVblksize;
    BYTE ucLastVblksize;
}StructColorLocalContrastVblkSetting;

typedef struct
{
    BYTE ucHblknumStart;
    BYTE ucVblknumStart;
    BYTE ucR3HblknumStart;
}StructColorLocalContrastBlknumStartPosition;

typedef enum
{
    _LOCAL_CONTRAST_SCENE_CHANGE_NONE,
    _LOCAL_CONTRAST_SCENE_CHANGE_BLOCK,
    _LOCAL_CONTRAST_SCENE_CHANGE_GLOBAL,
    _LOCAL_CONTRAST_SCENE_CHANGE_BOTH_GLOBAL_BLOCK,
} EnumLocalContrastSceneChangeStatus;

typedef enum
{
    _LOCAL_CONTRAST_EXCLUDE_TONEMAPPING_CURVE_APPLY,
    _LOCAL_CONTRAST_ALL_APPLY,
} EnumLocalContrastDBApplyType;
typedef enum
{
    _LOCAL_CONTRAST_ALL_FUNCTION_OFF,
    _LOCAL_CONTRAST_ALL_FUNCTION_ON,
    _LOCAL_CONTRAST_HIST_ONLY_ON,
} EnumLocalContrastEnableType;

typedef enum
{
    _LOCALCONTRAST_READYAVG_DISABLE,
    _LOCALCONTRAST_READYAVG_ENABLE,
} EnumLocalContrastReadYavgData;

typedef enum
{
    _LOCALCONTRAST_ASPECT_RATIO_OFF,
    _LOCALCONTRAST_ASPECT_RATIO_ON,
    _LOCALCONTRAST_ASPECT_RATIO_NONE,
} EnumLocalContrastAspectRatioStatus;
//--------------------------------------------------
// Structure of Kernel DCR
//--------------------------------------------------
typedef struct
{
    EnumSelRegion enumDCRUserMeasureRegion;
    EnumDCRMeasureSel enumDCRMeasureSel;
    WORD usThreshold2;
}
StructKernelDCRGlobalDimmingData;

typedef union
{
    StructKernelDCRGlobalDimmingData stKernelDCRGlobalDimmingData;
}UnionKernelDCRData;

typedef struct
{
    StructDCRSetting stDCRSetting;
    UnionKernelDCRData unKernelDCRData;
}StructColorDCRSetting;


//--------------------------------------------------
// Structure of Kernel DCC
//--------------------------------------------------
typedef struct
{
    BYTE *pucTable;
}StructKernelDCCHDR10LightEnhanceData;

typedef union
{
    StructKernelDCCHDR10LightEnhanceData stKernelDCCHDR10LightEnhanceData;
}UnionKernelDCCData;

typedef struct
{
    StructDCCSetting stDCCSetting;
    UnionKernelDCCData unKernelDCCData;
}StructColorDCCSetting;

typedef struct
{
    StructDCCHistogramSetting stDCCHistogramSetting;
} StructColorDCCHistogramSetting;

//--------------------------------------------------
// Structure of Kernel ICM
//--------------------------------------------------
typedef struct
{
    StructICMSetting stICMSetting;
}StructColorICMSetting;

//--------------------------------------------------
// Structure of Contrast
//--------------------------------------------------
typedef struct
{
    StructCtsSetting stCtsSetting;
}StructColorCtsSetting;

//--------------------------------------------------
// Structure of Brightness
//--------------------------------------------------
typedef struct
{
    StructBriSetting stBriSetting;
}StructColorBriSetting;

//--------------------------------------------------
// Structure of Kernel IAPS
//--------------------------------------------------
typedef struct
{
    BYTE ucSoftClampValue;
    WORD usGainValue;
}StructKernelIAPSHDR10LightEnhanceData;

typedef union
{
    StructKernelIAPSHDR10LightEnhanceData stKernelIAPSHDR10LightEnhanceData;
}UnionKernelIAPSData;

typedef struct
{
    StructIAPSSetting stIAPSSetting;
    UnionKernelIAPSData unKernelIAPSData;
} StructColorIAPSSetting;

//--------------------------------------------------
// Structure of Kernel 3DGamma
//--------------------------------------------------
typedef struct
{
    Struct3DGammaSetting st3DGammaSetting;
} StructColor3DGammaSetting;

//--------------------------------------------------
// Definitions of FreeSyncII EOTF Type
//--------------------------------------------------
typedef enum
{
    _FREESYNC_II_EOTF_SRGB,
    _FREESYNC_II_EOTF_BT709,
    _FREESYNC_II_EOTF_GAMMA_22,
    _FREESYNC_II_EOTF_GAMMA_26,
    _FREESYNC_II_EOTF_PQ_INTERIM,
} EnumFreeSyncIIEOTFType;

//--------------------------------------------------
// Definitions of Advanced HDR10 Port Setting Info
//--------------------------------------------------
typedef struct
{
    EnumAdvancedHDR10Support enumAdvancedHDR10D0Support;
    EnumAdvancedHDR10Support enumAdvancedHDR10D1Support;
    EnumAdvancedHDR10Support enumAdvancedHDR10D2Support;
    EnumAdvancedHDR10Support enumAdvancedHDR10D3Support;
    EnumAdvancedHDR10Support enumAdvancedHDR10D4Support;
    EnumAdvancedHDR10Support enumAdvancedHDR10D5Support;
} StructAdvancedHDR10PortSettingInfo;

//--------------------------------------------------
// Definitions of Advanced HDR10 FRC Status
//--------------------------------------------------
typedef enum
{
    _ADVANCED_HDR10_FRAME_SYNC = 0x00,
    _ADVANCED_HDR10_IN_SLOW = 0x01,
    _ADVANCED_HDR10_IN_FAST = 0x02,
} EnumAdvancedHDR10FRCStatus;

//--------------------------------------------------
// Definitions of Advanced HDR10 FRC Status
//--------------------------------------------------
typedef enum
{
    _ADVANCED_HDR10_PCM_HLW_DB_UNKNOWN,
    _ADVANCED_HDR10_PCM_HLW_DB_WRITE_SETA,
    _ADVANCED_HDR10_PCM_HLW_DB_STACK_SETA_PUSH_IN,
    _ADVANCED_HDR10_PCM_HLW_DB_WRITE_SETB,
    _ADVANCED_HDR10_PCM_HLW_DB_STACK_SETB_PUSH_IN,
    _ADVANCED_HDR10_PCM_HLW_DB_STACK_SETA_POP_OUT,
    _ADVANCED_HDR10_PCM_HLW_DB_STACK_SETB_POP_OUT,
    _ADVANCED_HDR10_PCM_HLW_DB_INITIAL,
    _ADVANCED_HDR10_PCM_HLW_DB_RESET,
    _ADVANCED_HDR10_PCM_HLW_DB_RE_INITIAL,
} EnumAdvancedHDR10PCMHLWDBStatus;

//--------------------------------------------------
// Definitions of Advanced HDR10 FRC Status
//--------------------------------------------------
typedef enum
{
    _ADVANCED_HDR10_PCM_HLW_DB_PROC_NORAML,
    _ADVANCED_HDR10_PCM_HLW_DB_PROC_IRQ,
} EnumAdvancedHDR10PCMHLWDBProc;

//--------------------------------------------------
// Definitions of PCM HLW DB Event Selection
//--------------------------------------------------
typedef enum
{
    _PCM_HLW_DB_GLOBAL_D,
    _PCM_HLW_DB_GLOBAL_IMD,
} EnumPCMHLWDBEventSel;

//--------------------------------------------------
// Enumerations of Digital Functions Double Buffer
//--------------------------------------------------
typedef enum
{
    _PCM_HLW_DB_A_OR_B,
    _PCM_HLW_DB_A,
    _PCM_HLW_DB_B,
} EnumPCMHLWDBSel;

//--------------------------------------------------
// Enumerations of IG Double Buffer Enable
//--------------------------------------------------
typedef enum
{
    _IG_DB_ENABLE,
    _IG_DB_DISABLE,
} EnumIGDBEnableStatus;

//--------------------------------------------------
// Structure of Kernel Input Gamma
//--------------------------------------------------
typedef struct
{
    EnumHDR10MaxMasteringLvType enumHDR10MaxMasteringLvType;
    BYTE *pucHDR10MasteringLvStepLessTMTable;
} StructKernelInGammaHDR10AutoData;

typedef struct
{
    EnumHDR10MaxMasteringLvType enumHDR10MaxMasteringLvType;
    BYTE *pucHDR10MasteringLvStepLessTMTable;
} StructKernelInGammaHDR10Force2084Data;

typedef struct
{
    BYTE ucAdvancedHDR10IGLUTIndex;
} StructKernelInGammaAdvancedHDR10Data;

typedef struct
{
    EnumFreeSyncIIEOTFType enumFreeSyncIIEOTFType;
} StructKernelInGammaFreeSync2Data;

typedef struct
{
    EnumGlobalDimmingStatus enumGlobalDimmingStatus;
    EnumLocalDimmingStatus enumLocalDimmingStatus;
} StructKernelInGammaOGCData;

typedef struct
{
    EnumHDR10SBTMMode enumHDR10SBTMMode;
    EnumHDR10SBTMGRDMLumMaxType enumHDR10SBTMGRDMLumMaxType;
    EnumHDR10SBTMGRDMMinType enumHDR10SBTMGRDMMinType;
} StructKernelInGammaSBTMData;

typedef union
{
    StructKernelInGammaHDR10AutoData stKernelInGammaHDR10AutoData;
    StructKernelInGammaHDR10Force2084Data stKernelInGammaHDR10Force2084Data;
    StructKernelInGammaAdvancedHDR10Data stKernelInGammaAdvancedHDR10Data;
    StructKernelInGammaFreeSync2Data stKernelInGammaFreeSync2Data;
    StructKernelInGammaOGCData stKernelInGammaOGCData;
    StructKernelInGammaSBTMData stKernelInGammaSBTMData;
} UnionKernelInGammaData;

typedef struct
{
    StructInGammaSetting stInGammaSetting;
    UnionKernelInGammaData unKernelInGammaData;
} StructColorInGammaSetting;

//--------------------------------------------------
// Definitions of RGB Gamma Mode & Change
//--------------------------------------------------
typedef enum
{
    _RGBGAMMA_BLENDMODE,
    _RGBGAMMA_DBMODE,
} EnumRGBGammaBlendMode;

typedef enum
{
    _RGBGAMMA_BLENDMODE_TO_BLENDMODE,
    _RGBGAMMA_BLENDMODE_TO_DBMODE,
    _RGBGAMMA_DBMODE_TO_BLENDMODE,
    _RGBGAMMA_DBMODE_TO_DBMODE,
} EnumRGBGammaModeChange;

//--------------------------------------------------
// Structure of Kernel YMapping
//--------------------------------------------------
typedef struct
{
    BYTE ucBank;
    BYTE *pucTable;
}StructKernelYmappingHLGData;

typedef struct
{
    WORD *pusHDRLinearOut;
    BYTE ucLvMatchBound;
    WORD usLvMatchBoundGain;
    EnumHDR10ColorMatrix enumHDR10ColorMatrix;
}StructKernelYmappingHDR10BackLightAdaptiveTMData;

typedef union
{
    StructKernelYmappingHLGData stKernelYmappingHLGData;
    StructKernelYmappingHDR10BackLightAdaptiveTMData stKernelYmappingHDR10BackLightAdaptiveTMData;
}UnionKernelYmappingData;

typedef struct
{
    StructYmappingSetting stYmappingSetting;
    UnionKernelYmappingData unKernelYmappingData;
} StructColorYmappingSetting;

//--------------------------------------------------
// Enumerations of Ymapping Mode
//--------------------------------------------------
typedef enum
{
    _YMAPPING_Y_MODE = 0,
    _YMAPPING_MAXRGB_MODE = 1,
}EnumYMappingFunctionMode;

//--------------------------------------------------
// Enumerations of Ymapping Precision
//--------------------------------------------------
typedef enum
{
    _YMAPPING_GAIN_PRECISION_U212 = 0,
    _YMAPPING_GAIN_PRECISION_U311 = 1,
    _YMAPPING_GAIN_PRECISION_U410 = 2,
    _YMAPPING_GAIN_PRECISION_U509 = 3,
    _YMAPPING_GAIN_PRECISION_U608 = 4,
}EnumYMappingGainPrecision;

//--------------------------------------------------
// Enumerations of Ymapping clamping on/off
//--------------------------------------------------
typedef enum
{
    _YMAPPING_SOFT_CLAMPING_OFF,
    _YMAPPING_SOFT_CLAMPING_ON,
}EnumYMappingSoftClamping;

//--------------------------------------------------
// Structure of Kernel sRGB
//--------------------------------------------------
typedef struct
{
    EnumHDR10ColorMatrix enumHDR10ColorMatrix;
}StructKernelSRGBHDR10AutoData;

typedef struct
{
    EnumHDR10ColorMatrix enumHLGColorMatrix;
}StructKernelSRGBHLGAutoData;

typedef struct
{
    BYTE *pucTable;
}StructKernelSRGBSDRtoHDRData;

typedef struct
{
    EnumHDR10SBTMMode enumHDR10SBTMMode;
}StructKernelSRGBSBTMData;

typedef union
{
    StructKernelSRGBHDR10AutoData stKernelSRGBHDR10AutoData;
    StructKernelSRGBHLGAutoData stKernelSRGBHLGAutoData;
    StructKernelSRGBSDRtoHDRData stKernelSRGBSDRtoHDRData;
    StructKernelSRGBSBTMData stKernelSRGBSBTMData;
}UnionKernelSRGBData;

typedef struct
{
    StructSRGBSetting stSRGBSetting;
    UnionKernelSRGBData unKernelSRGBData;
} StructColorSRGBSetting;

//--------------------------------------------------
// Structure of Kernel Color Convert
//--------------------------------------------------
typedef struct
{
    StructDColorConvertSetting stDColorConvertSetting;
}StructColorDColorConvertSetting;

//--------------------------------------------------
// Structure of Kernel Output Gamma
//--------------------------------------------------
typedef struct
{
    BYTE *pucTable;
} StructKernelOutGammaSDRtoHDRData;

typedef struct
{
    EnumGlobalDimmingStatus enumGlobalDimmingStatus;
    EnumLocalDimmingStatus  enumLocalDimmingStatus;
} StructKernelOutGammaOGCData;

typedef struct
{
    EnumGlobalDimmingStatus enumGlobalDimmingStatus;
} StructKernelOutGammaPCMData;

typedef struct
{
    EnumGlobalDimmingStatus enumGlobalDimmingStatus;
} StructKernelOutGammaHDR10Data;

typedef union
{
    StructKernelOutGammaSDRtoHDRData stKernelOutGammaSDRtoHDRData;
    StructKernelOutGammaOGCData stKernelOutGammaOGCData;
    StructKernelOutGammaPCMData stKernelOutGammaPCMData;
    StructKernelOutGammaHDR10Data stKernelOutGammaHDR10Data;
} UnionKernelOutGammaData;

typedef struct
{
    BYTE ucOutGammaTableBank;
    BYTE *pucOutGammaTableAddr;
} StructOutGammaTableAddr;

typedef union
{
    StructOutGammaTableAddr stOutGammaTableAddr;
}UnionKernelOutGammaTableAddr;

typedef struct
{
    StructOutGammaSetting stOutGammaSetting;
    UnionKernelOutGammaData unKernelOutGammaData;
    UnionKernelOutGammaTableAddr unKernelOutGammaTableAddr;
} StructColorOutGammaSetting;

//--------------------------------------------------
// Structure of Kernel Post Gamma
//--------------------------------------------------

typedef union
{
    StructKernelOutGammaOGCData stKernelPostGammaOGCData;
} UnionKernelPostGammaData;

typedef struct
{
    StructPostGammaSetting stPostGammaSetting;
    UnionKernelPostGammaData unKernelPostGammaData;
    UnionKernelOutGammaTableAddr unKernelPostGammaTableAddr;
} StructColorPostGammaSetting;

//--------------------------------------------------
// Structure of Kernel Local dimming
//--------------------------------------------------
typedef struct
{
    StructLocalDimmingSetting stLocalDimmingSetting;
} StructColorLocalDimmingSetting;

typedef struct
{
    WORD pusSmoothTable[25];
    WORD usSmoothGain;
} StructLocalDimmingSmoothData;

//--------------------------------------------------
// Enumerations of Local Dimming Backlight Model
//--------------------------------------------------
typedef enum
{
    _BLM_INTERVAL_64,
    _BLM_INTERVAL_128,
    _BLM_INTERVAL_32,
} EnumLocalDimmingBLMInterval;

typedef enum
{
    _BLM_DIRECT_LUT_STEP_64,
    _BLM_DIRECT_LUT_STEP_32,
} EnumLocalDimmingBLMDirectLutStep;

//--------------------------------------------------
// Enumerations of Local Dimming Proc Mode
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_HW_MODE,
    _LOCAL_DIMMING_ADJUST_FW_MODE,
    _LOCAL_DIMMING_SMOOTH_FW_MODE,
    _LOCAL_DIMMING_FW_MODE,
} EnumLDPWMProcMode;

//--------------------------------------------------
// Enumerations of Local Dimming Proc Step Change Mode
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_TIMER_MODE,
    _LOCAL_DIMMING_STEP_MODE,
} EnumLDStepMode;

//--------------------------------------------------
// Enumerations of Local Dimming Histogram
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_HISTO_LUT00 = 0,
    _LOCAL_DIMMING_HISTO_LUT01,
    _LOCAL_DIMMING_HISTO_LUT02,
    _LOCAL_DIMMING_HISTO_LUT03,
    _LOCAL_DIMMING_HISTO_LUT04,
    _LOCAL_DIMMING_HISTO_LUT05,
    _LOCAL_DIMMING_HISTO_LUT06,
    _LOCAL_DIMMING_HISTO_LUT07,
    _LOCAL_DIMMING_HISTO_LUT08,
    _LOCAL_DIMMING_HISTO_LUT09,
    _LOCAL_DIMMING_HISTO_LUT10,
    _LOCAL_DIMMING_HISTO_LUT11,
    _LOCAL_DIMMING_HISTO_LUT12,
    _LOCAL_DIMMING_HISTO_LUT13,
    _LOCAL_DIMMING_HISTO_LUT14,
    _LOCAL_DIMMING_HISTO_LUT15,
    _LOCAL_DIMMING_HISTO_LUT16,
    _LOCAL_DIMMING_HISTO_LUT17,
    _LOCAL_DIMMING_HISTO_LUT18,
    _LOCAL_DIMMING_HISTO_LUT19,
    _LOCAL_DIMMING_HISTO_LUT20,
    _LOCAL_DIMMING_HISTO_LUT21,
    _LOCAL_DIMMING_HISTO_LUT22,
    _LOCAL_DIMMING_HISTO_LUT23,
    _LOCAL_DIMMING_HISTO_LUT24,
    _LOCAL_DIMMING_HISTO_LUT25,
    _LOCAL_DIMMING_HISTO_LUT26,
    _LOCAL_DIMMING_HISTO_LUT27,
    _LOCAL_DIMMING_HISTO_LUT28,
    _LOCAL_DIMMING_HISTO_LUT29,
    _LOCAL_DIMMING_HISTO_LUT30,
    _LOCAL_DIMMING_HISTO_LUT31,
#if(_HW_LOCAL_DIMMING_GEN_SEL == _HW_LOCAL_DIMMING_GEN2)
    _LOCAL_DIMMING_HISTO_LUT32,
    _LOCAL_DIMMING_HISTO_LUT33,
    _LOCAL_DIMMING_HISTO_LUT34,
    _LOCAL_DIMMING_HISTO_LUT35,
    _LOCAL_DIMMING_HISTO_LUT36,
    _LOCAL_DIMMING_HISTO_LUT37,
    _LOCAL_DIMMING_HISTO_LUT38,
    _LOCAL_DIMMING_HISTO_LUT39,
    _LOCAL_DIMMING_HISTO_LUT40,
    _LOCAL_DIMMING_HISTO_LUT41,
    _LOCAL_DIMMING_HISTO_LUT42,
    _LOCAL_DIMMING_HISTO_LUT43,
    _LOCAL_DIMMING_HISTO_LUT44,
    _LOCAL_DIMMING_HISTO_LUT45,
    _LOCAL_DIMMING_HISTO_LUT46,
    _LOCAL_DIMMING_HISTO_LUT47,
    _LOCAL_DIMMING_HISTO_LUT48,
    _LOCAL_DIMMING_HISTO_LUT49,
    _LOCAL_DIMMING_HISTO_LUT50,
    _LOCAL_DIMMING_HISTO_LUT51,
    _LOCAL_DIMMING_HISTO_LUT52,
    _LOCAL_DIMMING_HISTO_LUT53,
    _LOCAL_DIMMING_HISTO_LUT54,
    _LOCAL_DIMMING_HISTO_LUT55,
    _LOCAL_DIMMING_HISTO_LUT56,
    _LOCAL_DIMMING_HISTO_LUT57,
    _LOCAL_DIMMING_HISTO_LUT58,
    _LOCAL_DIMMING_HISTO_LUT59,
    _LOCAL_DIMMING_HISTO_LUT60,
    _LOCAL_DIMMING_HISTO_LUT61,
    _LOCAL_DIMMING_HISTO_LUT62,
    _LOCAL_DIMMING_HISTO_LUT63,
    _LOCAL_DIMMING_HISTO_LUT64,
    _LOCAL_DIMMING_HISTO_LUT65,
    _LOCAL_DIMMING_HISTO_LUT66,
    _LOCAL_DIMMING_HISTO_LUT67,
    _LOCAL_DIMMING_HISTO_LUT68,
    _LOCAL_DIMMING_HISTO_LUT69,
    _LOCAL_DIMMING_HISTO_LUT70,
    _LOCAL_DIMMING_HISTO_LUT71,
    _LOCAL_DIMMING_HISTO_LUT72,
    _LOCAL_DIMMING_HISTO_LUT73,
    _LOCAL_DIMMING_HISTO_LUT74,
    _LOCAL_DIMMING_HISTO_LUT75,
    _LOCAL_DIMMING_HISTO_LUT76,
    _LOCAL_DIMMING_HISTO_LUT77,
    _LOCAL_DIMMING_HISTO_LUT78,
    _LOCAL_DIMMING_HISTO_LUT79,
    _LOCAL_DIMMING_HISTO_LUT80,
    _LOCAL_DIMMING_HISTO_LUT81,
    _LOCAL_DIMMING_HISTO_LUT82,
    _LOCAL_DIMMING_HISTO_LUT83,
    _LOCAL_DIMMING_HISTO_LUT84,
    _LOCAL_DIMMING_HISTO_LUT85,
    _LOCAL_DIMMING_HISTO_LUT86,
    _LOCAL_DIMMING_HISTO_LUT87,
    _LOCAL_DIMMING_HISTO_LUT88,
    _LOCAL_DIMMING_HISTO_LUT89,
    _LOCAL_DIMMING_HISTO_LUT90,
    _LOCAL_DIMMING_HISTO_LUT91,
    _LOCAL_DIMMING_HISTO_LUT92,
    _LOCAL_DIMMING_HISTO_LUT93,
    _LOCAL_DIMMING_HISTO_LUT94,
    _LOCAL_DIMMING_HISTO_LUT95,
    _LOCAL_DIMMING_HISTO_LUT96,
    _LOCAL_DIMMING_HISTO_LUT97,
    _LOCAL_DIMMING_HISTO_LUT98,
    _LOCAL_DIMMING_HISTO_LUT99,
    _LOCAL_DIMMING_HISTO_LUT100,
    _LOCAL_DIMMING_HISTO_LUT101,
    _LOCAL_DIMMING_HISTO_LUT102,
    _LOCAL_DIMMING_HISTO_LUT103,
    _LOCAL_DIMMING_HISTO_LUT104,
    _LOCAL_DIMMING_HISTO_LUT105,
    _LOCAL_DIMMING_HISTO_LUT106,
    _LOCAL_DIMMING_HISTO_LUT107,
    _LOCAL_DIMMING_HISTO_LUT108,
    _LOCAL_DIMMING_HISTO_LUT109,
    _LOCAL_DIMMING_HISTO_LUT110,
    _LOCAL_DIMMING_HISTO_LUT111,
    _LOCAL_DIMMING_HISTO_LUT112,
    _LOCAL_DIMMING_HISTO_LUT113,
    _LOCAL_DIMMING_HISTO_LUT114,
    _LOCAL_DIMMING_HISTO_LUT115,
    _LOCAL_DIMMING_HISTO_LUT116,
    _LOCAL_DIMMING_HISTO_LUT117,
    _LOCAL_DIMMING_HISTO_LUT118,
    _LOCAL_DIMMING_HISTO_LUT119,
    _LOCAL_DIMMING_HISTO_LUT120,
    _LOCAL_DIMMING_HISTO_LUT121,
    _LOCAL_DIMMING_HISTO_LUT122,
    _LOCAL_DIMMING_HISTO_LUT123,
    _LOCAL_DIMMING_HISTO_LUT124,
    _LOCAL_DIMMING_HISTO_LUT125,
    _LOCAL_DIMMING_HISTO_LUT126,
    _LOCAL_DIMMING_HISTO_LUT127,
    _LOCAL_DIMMING_HISTO_LUT128,
    _LOCAL_DIMMING_HISTO_LUT129,
    _LOCAL_DIMMING_HISTO_LUT130,
    _LOCAL_DIMMING_HISTO_LUT131,
    _LOCAL_DIMMING_HISTO_LUT132,
    _LOCAL_DIMMING_HISTO_LUT133,
    _LOCAL_DIMMING_HISTO_LUT134,
    _LOCAL_DIMMING_HISTO_LUT135,
    _LOCAL_DIMMING_HISTO_LUT136,
    _LOCAL_DIMMING_HISTO_LUT137,
    _LOCAL_DIMMING_HISTO_LUT138,
    _LOCAL_DIMMING_HISTO_LUT139,
    _LOCAL_DIMMING_HISTO_LUT140,
    _LOCAL_DIMMING_HISTO_LUT141,
    _LOCAL_DIMMING_HISTO_LUT142,
    _LOCAL_DIMMING_HISTO_LUT143,
    _LOCAL_DIMMING_HISTO_LUT144,
    _LOCAL_DIMMING_HISTO_LUT145,
    _LOCAL_DIMMING_HISTO_LUT146,
    _LOCAL_DIMMING_HISTO_LUT147,
    _LOCAL_DIMMING_HISTO_LUT148,
    _LOCAL_DIMMING_HISTO_LUT149,
    _LOCAL_DIMMING_HISTO_LUT150,
    _LOCAL_DIMMING_HISTO_LUT151,
    _LOCAL_DIMMING_HISTO_LUT152,
    _LOCAL_DIMMING_HISTO_LUT153,
    _LOCAL_DIMMING_HISTO_LUT154,
    _LOCAL_DIMMING_HISTO_LUT155,
    _LOCAL_DIMMING_HISTO_LUT156,
    _LOCAL_DIMMING_HISTO_LUT157,
    _LOCAL_DIMMING_HISTO_LUT158,
    _LOCAL_DIMMING_HISTO_LUT159,
    _LOCAL_DIMMING_HISTO_LUT160,
    _LOCAL_DIMMING_HISTO_LUT161,
    _LOCAL_DIMMING_HISTO_LUT162,
    _LOCAL_DIMMING_HISTO_LUT163,
    _LOCAL_DIMMING_HISTO_LUT164,
    _LOCAL_DIMMING_HISTO_LUT165,
    _LOCAL_DIMMING_HISTO_LUT166,
    _LOCAL_DIMMING_HISTO_LUT167,
    _LOCAL_DIMMING_HISTO_LUT168,
    _LOCAL_DIMMING_HISTO_LUT169,
    _LOCAL_DIMMING_HISTO_LUT170,
    _LOCAL_DIMMING_HISTO_LUT171,
    _LOCAL_DIMMING_HISTO_LUT172,
    _LOCAL_DIMMING_HISTO_LUT173,
    _LOCAL_DIMMING_HISTO_LUT174,
    _LOCAL_DIMMING_HISTO_LUT175,
    _LOCAL_DIMMING_HISTO_LUT176,
    _LOCAL_DIMMING_HISTO_LUT177,
    _LOCAL_DIMMING_HISTO_LUT178,
    _LOCAL_DIMMING_HISTO_LUT179,
    _LOCAL_DIMMING_HISTO_LUT180,
    _LOCAL_DIMMING_HISTO_LUT181,
    _LOCAL_DIMMING_HISTO_LUT182,
    _LOCAL_DIMMING_HISTO_LUT183,
    _LOCAL_DIMMING_HISTO_LUT184,
    _LOCAL_DIMMING_HISTO_LUT185,
    _LOCAL_DIMMING_HISTO_LUT186,
    _LOCAL_DIMMING_HISTO_LUT187,
    _LOCAL_DIMMING_HISTO_LUT188,
    _LOCAL_DIMMING_HISTO_LUT189,
    _LOCAL_DIMMING_HISTO_LUT190,
    _LOCAL_DIMMING_HISTO_LUT191,
    _LOCAL_DIMMING_HISTO_LUT192,
    _LOCAL_DIMMING_HISTO_LUT193,
    _LOCAL_DIMMING_HISTO_LUT194,
    _LOCAL_DIMMING_HISTO_LUT195,
    _LOCAL_DIMMING_HISTO_LUT196,
    _LOCAL_DIMMING_HISTO_LUT197,
    _LOCAL_DIMMING_HISTO_LUT198,
    _LOCAL_DIMMING_HISTO_LUT199,
    _LOCAL_DIMMING_HISTO_LUT200,
    _LOCAL_DIMMING_HISTO_LUT201,
    _LOCAL_DIMMING_HISTO_LUT202,
    _LOCAL_DIMMING_HISTO_LUT203,
    _LOCAL_DIMMING_HISTO_LUT204,
    _LOCAL_DIMMING_HISTO_LUT205,
    _LOCAL_DIMMING_HISTO_LUT206,
    _LOCAL_DIMMING_HISTO_LUT207,
    _LOCAL_DIMMING_HISTO_LUT208,
    _LOCAL_DIMMING_HISTO_LUT209,
    _LOCAL_DIMMING_HISTO_LUT210,
    _LOCAL_DIMMING_HISTO_LUT211,
    _LOCAL_DIMMING_HISTO_LUT212,
    _LOCAL_DIMMING_HISTO_LUT213,
    _LOCAL_DIMMING_HISTO_LUT214,
    _LOCAL_DIMMING_HISTO_LUT215,
    _LOCAL_DIMMING_HISTO_LUT216,
    _LOCAL_DIMMING_HISTO_LUT217,
    _LOCAL_DIMMING_HISTO_LUT218,
    _LOCAL_DIMMING_HISTO_LUT219,
    _LOCAL_DIMMING_HISTO_LUT220,
    _LOCAL_DIMMING_HISTO_LUT221,
    _LOCAL_DIMMING_HISTO_LUT222,
    _LOCAL_DIMMING_HISTO_LUT223,
    _LOCAL_DIMMING_HISTO_LUT224,
    _LOCAL_DIMMING_HISTO_LUT225,
    _LOCAL_DIMMING_HISTO_LUT226,
    _LOCAL_DIMMING_HISTO_LUT227,
    _LOCAL_DIMMING_HISTO_LUT228,
    _LOCAL_DIMMING_HISTO_LUT229,
    _LOCAL_DIMMING_HISTO_LUT230,
    _LOCAL_DIMMING_HISTO_LUT231,
    _LOCAL_DIMMING_HISTO_LUT232,
    _LOCAL_DIMMING_HISTO_LUT233,
    _LOCAL_DIMMING_HISTO_LUT234,
    _LOCAL_DIMMING_HISTO_LUT235,
    _LOCAL_DIMMING_HISTO_LUT236,
    _LOCAL_DIMMING_HISTO_LUT237,
    _LOCAL_DIMMING_HISTO_LUT238,
    _LOCAL_DIMMING_HISTO_LUT239,
    _LOCAL_DIMMING_HISTO_LUT240,
    _LOCAL_DIMMING_HISTO_LUT241,
    _LOCAL_DIMMING_HISTO_LUT242,
    _LOCAL_DIMMING_HISTO_LUT243,
    _LOCAL_DIMMING_HISTO_LUT244,
    _LOCAL_DIMMING_HISTO_LUT245,
    _LOCAL_DIMMING_HISTO_LUT246,
    _LOCAL_DIMMING_HISTO_LUT247,
    _LOCAL_DIMMING_HISTO_LUT248,
    _LOCAL_DIMMING_HISTO_LUT249,
    _LOCAL_DIMMING_HISTO_LUT250,
    _LOCAL_DIMMING_HISTO_LUT251,
    _LOCAL_DIMMING_HISTO_LUT252,
    _LOCAL_DIMMING_HISTO_LUT253,
    _LOCAL_DIMMING_HISTO_LUT254,
    _LOCAL_DIMMING_HISTO_LUT255,
#endif
}EnumLDLUTIndex;

//--------------------------------------------------
// Enumerations of Local Dimming Smooth type
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_SMOOTH_TYPE_OFF,
    _LOCAL_DIMMING_SMOOTH_TYPE_ON,
    _LOCAL_DIMMING_SMOOTH_TYPE_EXCEPT_BLACK,
} EnumLDSmoothType;

//--------------------------------------------------
// Enumerations of Local Dimming Step change type
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_STEP_CHANGE_TYPE_NORMAL,
    _LOCAL_DIMMING_STEP_CHANGE_TYPE_ONE_STEP,
} EnumLDStepChangeType;

//--------------------------------------------------
// Enumerations of Local Dimming extro info type
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_EXTRO_INOF_TYPE_BIN_IND,
    _LOCAL_DIMMING_EXTRO_INOF_TYPE_LUT_VALUE,
} EnumLDExtroInfoType;

//--------------------------------------------------
// Enumerations of Local Dimming extro info type
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_EXTRO_INOF_UPD_LD_SYNC,
    _LOCAL_DIMMING_EXTRO_INOF_UPD_AUTO,
} EnumLDExtroInfoUpdMode;

//--------------------------------------------------
// Struct of Local Dimming PWM Type
//--------------------------------------------------
typedef struct
{
    EnumLDSmoothType enumSmoothType;
    EnumLDStepChangeType enumStepChangeType;
}StructLocalDimmingPWMType;

typedef enum
{
    _LOCAL_DIMMING_REGION_TYPE_NORMAL,
    _LOCAL_DIMMING_REGION_TYPE_UP,
} EnumPWMProcRegionType;

//--------------------------------------------------
// Structure of PWM to SPI Info
//--------------------------------------------------
typedef struct
{
    BYTE b1TransmitByHW : 1;        // 0:Manual trigger SPI transmit ; 1:HW trigger SPI transmit
    DWORD ulDclkValue;
} StructPwmToSpiInfo;

typedef enum
{
    _SMODE_CLK_DCLK = 0,
    _SMODE_CLK_XTAL,
} EnumSModeClkSrc;

typedef enum
{
    _SMODE_INT_DISABLE = 0,
    _SMODE_INT_ENABLE,
} EnumSModeIntEn;

typedef enum
{
    _SMODE_SPI_TX_IMMEDIATE = 0,
    _SMODE_SPI_TX_NEXT_DVS,
    _SMODE_SPI_TX_NEXT_DEN_STOP,
} EnumSModeTxTiming;

typedef enum
{
    _SMODE_UPDSYNC_IMMEDIATE = 0,
    _SMODE_UPDSYNC_NEXT_1_DVS,
    _SMODE_UPDSYNC_NEXT_2_DVS,
    _SMODE_UPDSYNC_NEXT_1_DEN_STOP,
    _SMODE_UPDSYNC_NEXT_2_DEN_STOP,
} EnumSModeUpdSyncApplyTiming;

//--------------------------------------------------
// Structure of Kernel Uniformity
//--------------------------------------------------
typedef struct
{
    BYTE ucGainTableBank;
    WORD usGainTableAddr;
    DWORD ulGainTableSize;
    BYTE ucUniLevelMode;
#if(_UNIFORMITY_LEVEL0_SUPPORT == _ON)
    BYTE ucOffsetTableBank;
    WORD usOffsetTableAddr;
    WORD usDecayTableAddr;
#endif
} StructUniformityTableAddr;

typedef union
{
    StructUniformityTableAddr stUniformityTableAddr;
}UnionKernelUniformityTableAddr;

typedef struct
{
    StructUniformitySetting stUniformitySetting;
    UnionKernelUniformityTableAddr unKernelUniformityTableAddr;
} StructColorUniformitySetting;

//--------------------------------------------------
// Structure of Kernel Local Dimming
//--------------------------------------------------
typedef enum
{
    _LOCAL_DIMMING_FW_HISTOGRAM,
    _LOCAL_DIMMING_FW_PWMSTEP,
    _LOCAL_DIMMING_FW_BACKLIGHTMODEL,
    _LOCAL_DIMMING_FW_FAIL,
} EnumLocalDimmingProcessStage;

typedef struct
{
    EnumLocalDimmingProcessStage enumColorLocalDimmingProcessStage;
    BYTE b1ColorSmoothReadyFlag : 1;
    BYTE ucColorLocalDimmingBLPollingTime;
}StructLocalDimmingFWCtrl;

typedef struct
{
    WORD usMaxDeltaPWM;
    WORD usMaxDeltaTargetPWM;
}StructLocalDimmingBLMSoftClampPara;

//--------------------------------------------------
// Enumerations of Color PWM2SPI callback
//--------------------------------------------------
typedef enum
{
    _COLOR_PWM2SPI_SRAM_TX_CALLBACK_NULL,
    _COLOR_PWM2SPI_SRAM_TX_CALLBACK_LD,
} EnumColorPwm2SpiSramModeTxCallBackFuncId;

//--------------------------------------------------
// Structure of Kernel AntiAliasing
//--------------------------------------------------
typedef struct
{
    StructAntiAliasingSetting stAntiAliasingSetting;
} StructColorAntiAliasingSetting;

#if(_DYNAMIC_LOWBLUE_FUNCTION == _ON)
//--------------------------------------------------
// Structure of Kernel Dynamic Low Blue
//--------------------------------------------------
typedef struct
{
    WORD *pusGainArray;
    WORD usLength;
    WORD usLowBlueGainR;
    WORD usLowBlueGainG;
    WORD usLowBlueGainB;
} StructColorDynamicLowBluePara;
#endif
//****************************************************************************
// VARIABLE EXTERN
//****************************************************************************
#if(_COLOR_IP_DCC_HISTOGRAM == _ON)
extern bit g_bColorDCCReadyStatus;
#endif

#if(_COLOR_IP_DCR == _ON)
extern bit g_bColorDCRReadyStatus;
#endif

#if((_OGC_FUNCTION == _ON) || (_OCC_FUNCTION == _ON) || (_OGC_DICOM_FUNCTION == _ON) || (_UNIFORMITY_FUNCTION == _ON))
extern BYTE *g_pucColorDISP_CALIBRATION_FLASH;
extern BYTE *g_pucColorDISP_FREESYNC_II_CALIBRATION_FLASH;
#endif

#if(_COLOR_IP_LOCAL_DIMMING == _ON)
extern BYTE g_ucColorLDHistoLutMax;
extern BYTE g_ucColorLDHistoLutMin;

#if(_LOCAL_DIMMING_SCENE_CHANGE_SUPPORT == _ON)
extern BYTE g_ucColorHistoTHdHigh;
extern BYTE g_ucColorHistoTHdLow;
#endif

extern EnumColorPwm2SpiSramModeTxCallBackFuncId g_enumColorPwm2SpiSramModeTxCallBackFuncId;
#endif

#if(_ULTRA_HDR_SUPPORT == _ON)
extern EnumHDRTargetStatus g_penumColorHDRTargrtStatus[_MULTI_DISPLAY_MAX];
#endif

#if(_COLOR_IP_LOCAL_CONTRAST_HISTOGRAM == _ON)
extern bit g_bColorLocalContrastReadyReadStatus;
#endif

#if(_COLOR_IP_LOCAL_CONTRAST == _ON)
#if(_COLOR_IP_LOCAL_CONTRAST_HISTOGRAM == _ON)
#if(_FW_CPU32_IS_HIGH_SPEED_CPU == _TRUE)
extern WORD g_pusColorLocalContrastYavgArray[(_LOCAL_CONTRAST_READYAVG_HBLKNUM * _LOCAL_CONTRAST_READYAVG_VBLKNUM)];
#endif
#endif
#endif

//****************************************************************************
// FUNCTION EXTERN
//****************************************************************************
// Digital Filter
#if(_VGA_SUPPORT == _ON)
#if(_DIGITAL_FILTER_SUPPORT == _ON)
#if(_HW_DIGITAL_FILTER_TYPE != _GEN_NONE)
extern void ScalerColorDigitalFilterAdjust(void);
extern void ScalerColorDigitalFilterEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorDigitalFilterEnhancePhaseAdjust(BYTE *pucBGRGain);
#endif
#endif

#if(_RINGING_FILTER_FUNCTION == _ON)
#if(_HW_RINGING_FILTER_TYPE != _GEN_NONE)
// Ringing Filter
extern void ScalerColorRingingFilterOff(void);
extern void ScalerColorRingingFilterAdjust(BYTE *pucOffsetCoef);
#endif
#endif
#endif

#if(_COLOR_IP_COLOR_CONVERT == _ON)
// Color Conversion
extern void ScalerColorSpaceSetColorimetry(EnumInputPort enumInputPort, bit bHDTVMode);
extern void ScalerColorSpaceSetRGBLimitRange(EnumInputPort enumInputPort, EnumRGBQuantLimitRangeStatus enumRGBLimitRange);
extern void ScalerColorSpaceSetYCCFullRange(EnumInputPort enumInputPort, EnumYccQuantFullRangeStatus enumYCCFullRange);
extern void ScalerColorSpaceConvert(EnumDisplayRegion enumDisplayRegion, EnumInputPort enumInputPort, EnumColorSpace enumColorSpace, EnumDBApply enumDBApply);
extern EnumFunctionOnOFF ScalerColorSpaceConvertDDomainCheckEnableStatus(EnumDisplayRegion enumDisplayRegion);
extern void ScalerColorSpaceConvertDDomainEnable(EnumDisplayRegion enumDisplayRegion, bit bOn);
extern void ScalerColorSpaceConvertIDomainEnable(EnumDisplayRegion enumDisplayRegion, bit bOn);
extern void ScalerColorSpaceLoadYuv2RgbTable(EnumDisplayRegion enumDisplayRegion, EnumDBApply enumDBApply);
#if(_COLOR_IP_DM == _ON)
extern void ScalerColorSpaceConvertDM(EnumDisplayRegion enumDisplayRegion, EnumDBApply enumDBApply);
#endif
#if(_IMMERSIVE_NIGHT_SNIPER_FUNCTION == _ON)
extern void ScalerColorSpaceConvertNightSniperEnable(EnumSelRegion enumSelRegion, bit bOn, bit bOn_Inverse, bit bOn_Apply_both);
#endif

// Color Conversion
extern EnumColorimetry ScalerColorSpaceGetColorimetry(EnumInputPort enumInputPort);
extern EnumColorimetryExt ScalerColorSpaceGetExtColorimetry(EnumInputPort enumInputPort);
extern EnumColorimetryAddExt ScalerColorSpaceGetAddExtColorimetry(EnumInputPort enumInputPort);
extern EnumColorRGBQuantization ScalerColorSpaceGetRGBQuantizationRange(EnumInputPort enumInputPort);
extern EnumColorYCCQuantization ScalerColorSpaceGetYCCQuantizationRange(EnumInputPort enumInputPort);
#if(_GLOBAL_COLOR_CONVERT_HUE_SATURATION_FUNCTION == _ON)
extern void ScalerColorSpaceConvertRecover(void);
extern void ScalerColorSpaceConvertDBApply(EnumDisplayRegion enumDisplayRegion, EnumDBApply enumDBApply);
#endif
#endif
// Color Sampling
extern void ScalerColor422To444(EnumInputPort enumInputPort, EnumDisplayRegion enumDisplayRegion);
#if(_COLOR_IP_DM == _ON)
extern void ScalerColor422To444DM(EnumInputPort enumInputPort, EnumDisplayRegion enumDisplayRegion, bit bOn);
#endif


// Color Depth
extern BYTE ScalerColorGetColorDepth(EnumInputPort enumInputPort);

extern EnumColorSpace ScalerColorGetColorSpace(EnumInputPort enumInputPort);
extern bit ScalerColorGetColorSpaceRGB(EnumColorSpace enumColorSpace);

// IDither
#if(_COLOR_IP_I_DITHER == _ON)
extern void ScalerColorIDitherAdjust(WORD usPage, EnumIDitherConvType enumIDitherConvType, BYTE *pucDitherTable, BYTE *pucSeqTable, BYTE *pucTempoTable, BYTE ucBankAddress);
extern void ScalerColorIDitherLoadDitherTable(WORD usPage, BYTE *pucDitherTable, BYTE ucBankAddress);
extern void ScalerColorIDitherEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorIDitherRegionEnable(EnumDisplayRegion enumDisplayRegion, EnumFunctionOnOFF enumOn);
extern void ScalerColorIDitherTableSelect(EnumSelRegion enumSelRegion, BYTE ucColorDepth);
extern BYTE ScalerColorIDitherGetTableSetNum(void);
#endif

// Scaling
extern bit ScalerColorScalingByPassTableSel(EnumSelRegion enumSelRegion);

#if(_HW_SCALING_DOWN_TYPE == _SD_GEN_0)
// Scale Down Mask
extern void ScalerColorScalingDownSetMaskLSB(EnumInputDataPath enumInputDataPath);
#endif

// Highlight Window
#if(_COLOR_IP_HL_WIN == _ON)
extern void ScalerColorHLWEnable(EnumFunctionOnOFF enumOn, EnumDBApply enumDBApply);
extern void ScalerColorIPHLWAdjust(StructColorHLWSetting *pstHLWData, EnumDBApply enumDBApply);

extern void ScalerColorHLWAdjust(WORD usHPos, WORD usHWidth, WORD usVPos, WORD usVHeight, EnumDBApply enumDBApply);

extern void ScalerColorHLWDDomainAdjust(WORD usHPos, WORD usHWidth, WORD usVPos, WORD usVHeight);
extern void ScalerColorHLWDDomainEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorHLWBorderAdjust(BYTE ucBorderWidth, BYTE ucRed, BYTE ucGreen, BYTE ucBlue, EnumDBApply enumDBApply);
extern void ScalerColorHLWBorderEnable(bit bTopBorderEn, bit bBottomBorderEn, bit bLeftBorderEn, bit bRightBorderEn, EnumDBApply enumDBApply);
extern bit ScalerColorHLWSupportCheck(void);
#endif

// Border Window
#if(_COLOR_IP_BORDER_WIN == _ON)
extern void ScalerColorIPBorderWindowAdjust(StructColorBorderWindowSetting *pstBorderWindowData, EnumDBApply enumDBApply);
#endif

#if((_COLOR_IP_LSR == _ON) || (_COLOR_IP_DSHP == _ON))
extern void ScalerColorUltraVividInitial(void);
extern void ScalerColorIPUltraVividAdjust(EnumSelRegion enumSelRegion, StructColorUltraVividSetting *pstUltraVividSetting);
extern void ScalerColorUltraVividAdjust(EnumSelRegion enumSelRegion, BYTE *pucUltraVividSetting, BYTE ucBankNum);
extern void ScalerColorUltraVividRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#endif

#if(_COLOR_IP_SHARPNESS == _ON)
extern void ScalerColorIPSharpnessAdjust(EnumSelRegion enumSelRegion, StructColorSharpnessSetting *pstSharpnessSetting, EnumDBApply enumDBApply);
#endif

#if(_SD_TABLE_SEL_FUNCTION == _ON)
extern void ScalerColorIPScalingDownCoefAdjust(EnumSelRegion enumSelRegion, StructColorScalingDownCoefSetting *pstScalingDownCoefSetting);
#endif

// Local Contrast
#if(_COLOR_IP_LOCAL_CONTRAST == _ON)
extern void ScalerColorIPLocalContrastAdjust(EnumSelRegion enumSelRegion, StructColorLocalContrastSetting *pstLocalContrastData);
extern void ScalerColorIPLocalContrastTemporalAdjust(EnumSelRegion enumSelRegion, StructColorLocalContrastTemporalSetting *pstLocalContrastData, EnumLocalContrastReadYavgData enumLocalContrastReadYavgData);
extern bit ScalerColorLocalContrastCheckRegionSupport(EnumSelRegion enumSelRegion);
extern void ScalerColorLocalContrastBacklightDecision(EnumSelRegion enumSelRegion, EnumLocalContrastReadYavgData enumLocalContrastReadYavgData);
extern void ScalerColorLocalContrastEnable(EnumSelRegion enumSelRegion, EnumLocalContrastEnableType enumLocalContrastEnableType);
extern void ScalerColorLocalContrastRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
extern bit ScalerColorLocalContrastGetEnableStatus(EnumSelRegion enumSelRegion);
extern void ScalerColorLocalContrastTableDBApply(EnumSelRegion enumSelRegion, EnumLocalContrastDBApplyType enumDBApplyType, EnumDBApply enumDBApply);
extern void ScalerColorLocalContrastBypass(EnumSelRegion enumSelRegion);
extern void ScalerColorLocalContrastAdjust(EnumSelRegion enumSelRegion, BYTE *pucTable, BYTE ucBankNum, WORD usTableSize);
#if(_HW_FORMAT_CONVERSION_FB_SUPPORT == _ON)
extern void ScalerColorLocalContrastFBInital(void);
#endif
#if(_LOCAL_CONTRAST_MARGIN_BLOCK_CONTORL == _ON)
extern bit ScalerColorLocalContrastMarginBlockControlAvailable(void);
#endif
#if(_LOCAL_DIMMING_FUNCTION == _ON)
#if(_LOCAL_DIMMING_SCENE_CHANGE_SUPPORT == _ON)
extern void ScalerColorLocalContrastSetSceneChangeTHD(EnumSelRegion enumSelRegion);
extern void ScalerColorLocalContrastClearSceneChangeFlag(EnumSelRegion enumSelRegion, EnumLocalContrastSceneChangeStatus enumLocalContrastSceneChangeStatus);
extern bit ScalerColorLocalContrastDetectSceneChangeFlag(EnumSelRegion enumSelRegion, EnumLocalContrastSceneChangeStatus enumLocalContrastSceneChangeStatus);
#endif
#endif
#if((_ADVANCED_LOCAL_CONTRAST_SUPPORT == _ON) || (_SDR_PLUS_FUNCTION == _ON))
extern void ScalerColorLocalContrastYdiffGainAdjust(EnumSelRegion enumSelRegion, BYTE *pucLocalContrastTable, BYTE ucBankNum, BYTE ucYdiffGainFactor, BYTE ucYdiffdevisorAdjust);
extern BYTE ScalerColorLocalContrastYdiffDevisorAdjust(EnumSelRegion enumSelRegion, BYTE *pucLocalContrastTable, BYTE ucBankNum);
extern void ScalerColorLocalContrastToneMappingGainAdjust(EnumSelRegion enumSelRegion, BYTE *pucLocalContrastTable, BYTE ucBankNum, BYTE ucTMFactorGain);
#endif
#if(_COLOR_IP_LOCAL_CONTRAST_HISTOGRAM == _ON)
extern void ScalerColorLocalContrastReadYavgProcEnable(EnumFunctionOnOFF enumOn);
#if(_FW_CPU32_IS_HIGH_SPEED_CPU == _TRUE)
extern void ScalerColorLocalContrastReadYavg(void);
#endif
extern bit ScalerColorLocalContrastGetYavgSWmodeStatus(void);
extern void ScalerColorLocalContrastDisableYavgSWmode(void);
extern void ScalerColorLocalContrastReadYavgPosMapping(EnumSelRegion enumSelRegion, StructColorLocalContrastBlknumStartPosition *pstLocalContrastBlknumStartPosition);
extern bit ScalerColorLocalContrastGetReadYavgRegionSupport(EnumSelRegion enumSelRegion);
extern bit ScalerColorLocalContrastGetReadYavgSupport(EnumSelRegion enumSelRegion);
extern EnumLocalContrastAspectRatioStatus ScalerColorLocalContrastCheckAspectRatioStatus(void);
#endif
#endif

// PIPBlending
#if(_2P_PIP_DISPLAY_SUPPORT == _ON)
extern void ScalerColorPIPBlendingEnable(BYTE ucEnable);
extern void ScalerColorPIPBlendingLevelAdjust(WORD usLevel, EnumDBApply enumDBApply);
#endif

// DCR
#if(_COLOR_IP_DCR == _ON)
extern void ScalerColorDCRSetSource(void);
extern void ScalerColorIPDCRAdjust(StructColorDCRSetting *pstDCRSetting);
#if(_LOCAL_DIMMING_GLOBAL_BOOST_SUPPORT == _ON)
extern BYTE ScalerColorDCRMaxYStoreResult(void);
#endif

extern void ScalerColorDCRClrDataReadyStatus(void);
extern void ScalerColorDCRDataRefreshControl(bit bMode);
extern void ScalerColorDCREnable(EnumFunctionOnOFF enumOn);
extern bit ScalerColorDCRGetDataReadyStatus(void);

extern void ScalerColorDCRAdjust(WORD usThreshold1, WORD usThreshold2, EnumDCRMeasureSel enumDCRMeasureSel);

#if(_HW_DCR_BIT == _DCR_8BIT)
extern DWORD ScalerColorDCRReadResult_8BIT(EnumDCRAdjOption enumDCRReadOption);
extern WORD ScalerColorDCRGetAverage_8BIT(EnumDCRAverageOption enumDCRAverageOption, DWORD ulDivider);
#endif

#if(_HW_DCR_BIT == _DCR_10BIT)
extern DWORD ScalerColorDCRReadResult_10BIT(EnumDCRAdjOption enumDCRReadOption);
extern WORD ScalerColorDCRGetAverage_10BIT(EnumDCRAverageOption enumDCRAverageOption, DWORD ulDivider);
extern WORD ScalerColorDCRGetMaxRGB_10BIT(void);
#endif

extern DWORD ScalerColorDCRGetMeasureRegionSize(EnumSelRegion enumDCRMeasureRegion);

#if(_HW_DCR_CLL_FALL_OPTION_SUPPORT == _ON)
extern void ScalerColorDCRResetCLLResult(void);
#endif
#if(_HW_DCR_SET_BACKGROUND_OPTION_SUPPORT == _ON)
extern void ScalerColorDCRSetBackgroundColor(WORD usRValue, WORD usGValue, WORD usBValue);
extern void ScalerColorDCRSetBackgroundEnable(EnumFunctionOnOFF enumOn);
#endif

extern void ScalerColorDCRSetMeasureRegion(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply);

#endif

#if(_COLOR_IP_DCC_HISTOGRAM == _ON)
extern void ScalerColorDCCHistoSetting(void);
extern void ScalerColorDCCGetHistoInfo(BYTE *pucReadArray);
extern void ScalerColorDCCClrDataReadyStatus(void);
extern bit ScalerColorDCCGetDataReadyStatus(void);
extern BYTE ScalerColorDCCReadS0toS6(BYTE *pucReadArray, EnumDCCReadOption enumDCCReadOption);
#if(_HW_DCC_Y_BIT_MODE == _DCC_Y_8BIT)
extern BYTE ScalerColorDCCReadY_8BIT(BYTE *pucReadArray, EnumDCCReadOption enumDCCReadOption);
#elif(_HW_DCC_Y_BIT_MODE == _DCC_Y_10BIT)
extern WORD ScalerColorDCCReadY_10BIT(BYTE *pucReadArray, EnumDCCReadOption enumDCCReadOption);
#endif
#endif

#if((_COLOR_IP_DCC_HISTOGRAM == _ON) || (_COLOR_IP_DCC == _ON))
extern void ScalerColorIPDCCHistogramAdjust(StructColorDCCHistogramSetting *pstDCCHistogramSetting);
extern void ScalerColorDCCSetHistoMeasureRegion(EnumSelRegion enumDCCHistoMeasureRegion);
extern void ScalerColorDCCNormalizeFactorAdjust(EnumSelRegion enumDCCMeasureRegion);
#endif

#if(_COLOR_IP_DCC == _ON)
extern void ScalerColorIPDCCAdjust(EnumSelRegion enumSelRegion, StructColorDCCSetting *pstDCCSetting);
extern void ScalerColorDCCAdjust(EnumSelRegion enumSelRegion, BYTE *pucDccTable, BYTE ucBankAddress);
extern void ScalerColorDCCEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorDCCRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorDCCSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
extern EnumHLWSetSel ScalerColorDCCGetEffectiveRegion(void);
#endif
extern void ScalerColorDCCSetAutoModeRegion(EnumSelRegion enumSelRegion, EnumDCCAutoModeEnable enumDCCAutoModeEnable);
#endif

#if(_COLOR_IP_ICM == _ON)
extern void ScalerColorIPICMAdjust(EnumSelRegion enumSelRegion, StructColorICMSetting *pstICMSetting);
extern void ScalerColorICMEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorICMSCMRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorICMSCMSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
extern EnumHLWSetSel ScalerColorICMSCMGetEffectiveRegion(void);
#endif
extern void ScalerColorSCMLoadTable(EnumSelRegion enumSelRegion, BYTE *pucSCMTable, BYTE ucBankNum);
#if(_HW_ICM_DB_TYPE == _ICM_DB_GEN_1)
extern void ScalerColorICMDisableAllCM(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply);
extern void ScalerColorICMLocalDBEable(EnumFunctionOnOFF enumOn);
extern void ScalerColorICMLocalDBApply(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply);
#endif
#endif

#if(_COLOR_IP_CONTRAST == _ON)
extern void ScalerColorIPContrastAdjust(EnumSelRegion enumSelRegion, StructColorCtsSetting *pstCtsSetting);
extern void ScalerColorContrastEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorContrastAdjust(EnumSelRegion enumSelRegion, WORD *pusData);
extern void ScalerColorContrastGetSetting(EnumCtsCoefType enumCtsCoefType, WORD *pusData);
#endif

#if(_COLOR_IP_BRIGHTNESS == _ON)
extern void ScalerColorIPBrightnessAdjust(EnumSelRegion enumSelRegion, StructColorBriSetting *pstBriSetting);
extern void ScalerColorBrightnessEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorBrightnessAdjust(EnumSelRegion enumSelRegion, WORD *pusData);
extern void ScalerColorBrightnessGetSetting(EnumBriCoefType enumBriCoefType, WORD *pusData);
#endif

// Brightness & Contrast
#if((_COLOR_IP_CONTRAST == _ON) || (_COLOR_IP_BRIGHTNESS == _ON))
extern void ScalerColorBrightnessContrastHLWRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
extern void ScalerColorBrightnessContrastHLWSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
#endif

#if(_COLOR_IP_IAPS == _ON)
extern void ScalerColorIPIAPSAdjust(EnumSelRegion enumSelRegion, StructColorIAPSSetting *pstIAPSSetting);
extern void ScalerColorIAPSGainEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorIAPSGainRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorIAPSGainSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
extern EnumHLWSetSel ScalerColorIAPSGainGetEffectiveRegion(void);
#endif
extern void ScalerColorIAPSGainSoftClampAdjust(EnumSelRegion enumSelRegion, BYTE ucSoftClampFac);
extern void ScalerColorIAPSGainValueAdjust(EnumSelRegion enumSelRegion, WORD usGainValue);
#endif

#if(_COLOR_IP_RGB_3D_GAMMA == _ON)
extern void ScalerColorIP3DGammaAdjust(StructColor3DGammaSetting *pst3DGammaSetting);
extern void ScalerColor3DGammaRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
extern void ScalerColorRGB3DGammaAdjust(BYTE *pucGammaTableArray, BYTE ucBankNum);
extern void ScalerColorRGB3DGammaEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorRGBGamma3DGammaSwapEnable(EnumFunctionOnOFF enumOn);
#if(_HW_3D_GAMMA_TABLE_TYPE == _3D_GAMMA_GEN_2)
extern void ScalerColorRGB3DGammaInitial(void);
#endif
#endif

#if(_COLOR_IP_I_GAMMA == _ON)
extern void ScalerColorPCMInitial(void);
extern void ScalerColorIPInGammaAdjust(EnumSelRegion enumSelRegion, StructColorInGammaSetting *pstInGammaSetting, EnumIGDBEnableStatus enumDbEnable);
extern EnumPCMModeSelect ScalerColorPCMGetPCMMode(EnumSelRegion enumSelRegion);
extern void ScalerColorPCMInputGammaAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum, EnumIGDBEnableStatus enumDbEnable);
extern void ScalerColorPCMInputGamma129NodeAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum, EnumIGDBEnableStatus enumDbEnable);
extern void ScalerColorPCMInputGammaEnable(EnumFunctionOnOFF enumOn);
#if(_COLOR_IP_SRGB == _ON)
extern void ScalerColorPCMSRGBRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#endif
#if(_OCC_FUNCTION == _ON)
extern void ScalerColorPCMInputGammaLoadTable(BYTE ucSelect);
#endif
#if(_COLOR_IP_P_GAMMA == _ON)
extern void ScalerColorPCMPostGammaAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum);
extern void ScalerColorPCMPostGammaRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorPCMPostGammaSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
#endif
#endif
#if(_COLOR_IP_O_GAMMA == _ON)
extern void ScalerColorPCMOutputGammaAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum);
extern void ScalerColorPCMOutputGammaRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorPCMOutputGammaSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
#endif
#endif
extern void ScalerColorPCMRGBInputGammaAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum);

#if(_COLOR_IP_YMAPPING == _ON)
extern void ScalerColorPCMYMappingRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn, EnumPCMHLWDBSel enumPCMHLWDBSel);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorPCMYMappingSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply, EnumPCMHLWDBSel enumPCMHLWDBSel);
#endif
#endif
extern void ScalerColorPCMRGBInputGamma129NodeAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum);
extern void ScalerColorPCMInputGammaRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn, EnumPCMHLWDBSel enumPCMHLWDBSel);
extern void ScalerColorPCMRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorPCMInputGammaSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply, EnumPCMHLWDBSel enumPCMHLWDBSel);
extern EnumHLWSetSel ScalerColorPCMInputGammaGetEffectiveRegion(void);
extern void ScalerColorPCMSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
#if(_ADVANCED_HDR10_SUPPORT == _ON)
extern void ScalerColorPCMAdvancedHDR10SetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply, EnumPCMHLWDBSel enumPCMHLWDBSel);
extern EnumPCMHLWDBEventSel ScalerColorPCMInputGammaGetHLWDBEventSel(void);
#endif
#endif

extern void ScalerColorPCMSRGBAdjust(EnumSelRegion enumSelRegion, EnumSrgbPrecision enumSrgbPrecision, BYTE *pucColorMatrixArray, BYTE ucBankNum, WORD usLength);
extern void ScalerColorPCMSetPCMMode(EnumSelRegion enumSelRegion, EnumPCMModeSelect enumPCMModeSelect);
#if(_OCC_FUNCTION == _ON)
extern BYTE *ScalerColorPCMGetTableAddress(EnumPCMType enumPCMMode);
extern BYTE ScalerColorPCMGetTableBank(void);
#if(_OCC_PCM_GAMMA_SUPPORT == _ON)
extern BYTE *ScalerColorOCCPCMGammaGetTableAddress(EnumOCCPCMGammaType enumOCCPCMGammaType);
extern WORD ScalerColorOCCPCMGammaGetsRGBCTTableAddress(EnumOCCPCMGammaCTMatrix enumOCCPCMGammaCTMatrix, EnumOGCModeSelect enumOGCModeSelect);
#endif
#endif
#if(_HW_INPUT_GAMMA_TABLE_NODE_TYPE == _INPUT_GAMMA_NODE_1025)
extern void ScalerColorPCMSetNodeType(EnumSelRegion enumSelRegion, EnumPCMNodeType enumPCMNodeType);
extern EnumPCMNodeType ScalerColorPCMGetNodeType(EnumSelRegion enumSelRegion);
extern void ScalerColorPCMInputGamma1025NodeAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum, EnumIGDBEnableStatus enumDbEnable);
extern void ScalerColorPCMRGBInputGamma1025NodeAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum, EnumIGDBEnableStatus enumDbEnable);
#endif
#endif

// Ymapping
#if(_COLOR_IP_YMAPPING == _ON)
extern void ScalerColorIPYmappingAdjust(EnumSelRegion enumSelRegion, StructColorYmappingSetting *pstYmappingSetting);
extern void ScalerColorYMappingModeSelect(EnumSelRegion enumSelRegion, EnumYMappingFunctionMode enumYMappingFunctionMode);
extern void ScalerColorYMappingEnable(EnumSelRegion enumSelRegion, EnumFunctionOnOFF enumOn);
extern void ScalerColorYMappingSoftClampEnable(EnumSelRegion enumSelRegion, EnumFunctionOnOFF enumOn);
extern void ScalerColorYMappingSetGainPrecision(EnumSelRegion enumSelRegion, EnumYMappingGainPrecision enumYMappingGainPrecision);
extern void ScalerColorYMappingSetOffset(EnumSelRegion enumSelRegion, WORD usYMappingOffset);
#endif

#if(_COLOR_IP_SRGB == _ON)
extern void ScalerColorIPSRGBAdjust(EnumSelRegion enumSelRegion, StructColorSRGBSetting *pstSRGBSetting);
extern bit ScalerColorSRGBAdjust(EnumSelRegion enumSelRegion, BYTE *pucSRGBArray, EnumSrgbPrecision enumPrecision);
extern void ScalerColorSRGBEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorSRGBRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
extern EnumSrgbPrecision ScalerColorSRGBGetPrecision(EnumSelRegion enumSelRegion);
#if(_HW_SRGB_DB_GEN_SEL == _SRGB_GEN_1)
extern void ScalerColorSRGBInitial(void);
#endif
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorSRGBSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
#endif
#endif

#if(_GLOBAL_COLOR_CONVERT_HUE_SATURATION_FUNCTION == _ON)
extern void ScalerColorIPDColorConvertAdjust(EnumSelRegion enumSelRegion, StructColorDColorConvertSetting *pstDColorConvertSetting);
#endif

// Local dimming
#if(_COLOR_IP_LOCAL_DIMMING == _ON)
extern void ScalerColorLDPWMProcInitial(void);
extern void ScalerColorLDHistoInitial(WORD usCoverRate);
extern void ScalerColorLDHistoSetCoverRate(WORD usCoverRate);
extern void ScalerColorLDBLModelInitial(void);
extern void ScalerColorLDBLModelLVLutInitial(void);
extern void ScalerColorLDHistoLutChangeType(EnumLocalDimmingType enumLocalDimmingType);
extern EnumLDSmoothType ScalerColorLDGetCornerSmoothMode(void);
#if(_HW_LOCAL_DIMMING_GEN_SEL == _HW_LOCAL_DIMMING_GEN1)
extern void ScalerColorLDAdjustDirectMaskAdjust(BYTE *pucLDAdjDirectMaskTable, BYTE ucBankAddress);
extern void ScalerColorLDAdjustEdgeMaskAdjust(BYTE *pucLDAdjEdgeMaskTable, BYTE ucBankAddress, WORD usTableSize);
extern void ScalerColorLDAdjustEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDAdjustInitial(void);
extern void ScalerColorLDAdjustMinPWMAdjust(WORD usMinPWM);
#endif
extern void ScalerColorLDBLModelBlackTHAdjust(WORD usThValue);
extern void ScalerColorLDBLModelBlackTHDelta(BYTE ucTHDelta);
extern void ScalerColorLDBLModelCTSGainAdjust(void);
extern void ScalerColorLDBLModelDirectLEDSetting(BYTE *pucLedLutTable, BYTE ucBankAddress);
extern void ScalerColorLDBLModelEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDBLModelFWSwitchApply(void);
extern bit ScalerColorLDBLModelFWSwitchStatus(void);
extern bit ScalerColorLDBLModelGetEnableStatus(void);
extern void ScalerColorLDBLModelLedGainAdjust(BYTE *pucLedGainTable, WORD usLength, BYTE ucBankAddress);
extern void ScalerColorLDBLModelLedLutTableAdjust(BYTE *pucLedLutTable, WORD usLength, BYTE ucBankAddress);
extern void ScalerColorLDBLModelLvTableAdjust(BYTE *pucBLLvTable, WORD usLength, BYTE ucBankAddress);
extern void ScalerColorLDBLModelManualSwitchApply(void);
extern bit ScalerColorLDBLModelManualSwitchStatus(void);
extern void ScalerColorLDBLModelMaxLvTableAdjust(BYTE *pucMaxLvTable, WORD usLength, BYTE ucBankAddress);
extern void ScalerColorLDBLModelPWMGainAdjust(BYTE *pucPWMTable, BYTE ucBankAddress);
extern void ScalerColorLDBLModelSCurveThAdjust(BYTE *pucLDSCurveThTable, BYTE ucBankAddress);
extern void ScalerColorLDBLModelSetEdgePWMOffset(BYTE ucPWMOffset);
extern void ScalerColorLDBLModelSetExtend(BYTE ucHStep, BYTE ucVStep);
extern void ScalerColorLDBLModelSetMaxGain(WORD usMaxGain);
extern void ScalerColorLDBLModelSetMinGain(WORD usMinGain);
extern void ScalerColorLDBLModelSoftClampAdjust(BYTE ucSCSlop);
#if(_HW_FORMAT_CONVERSION_FB_SUPPORT == _ON)
extern void ScalerColorLDBLModelFrontBackEnable(bit bEnable);
extern bit ScalerColorLDBLModelGetFrontBackEnable(void);
#endif
extern bit ScalerColorLDBLModelGainApplyDone(void);
extern void ScalerColorLDBLModelGainApplyDoneClear(void);
extern void ScalerColorLDBLModelSetLvInterval(EnumLocalDimmingBLMInterval enumLocalDimmingBLMInterval);
extern void ScalerColorLDBLModelDirectLEDLutStep(EnumLocalDimmingBLMDirectLutStep enumLocalDimmingBLMDirectLutStep);
extern void ScalerColorLDBLModelEdgeExtendMode(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDBLModelExtendSCurveThAdjust(BYTE *pucLDSCurveThTable, BYTE ucBankAddress);
extern void ScalerColorLDBLModeS1CurveTableAdjust(BYTE *pucBLLvTable, WORD usLength, BYTE ucBankAddress);
extern void ScalerColorLDBLModeS2CurveTableAdjust(BYTE *pucBLLvTable, WORD usLength, BYTE ucBankAddress);
extern void ScalerColorLDBLModelUniqueGainEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDBLModelDeepBlackEnable(EnumFunctionOnOFF enumOn);

extern void ScalerColorLDHistoBGEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDHistoBGMsbAdjust(BYTE ucBGMsb);
extern void ScalerColorLDHistoEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDHistoLUTAdjust(BYTE *pucLDHistoTable, BYTE ucBankAddress);
extern WORD ScalerColorLDHistoGetLUT(EnumLDLUTIndex enumLDLutInd);
#if(_HW_LOCAL_DIMMING_GEN_SEL == _HW_LOCAL_DIMMING_GEN2)
extern void ScalerColorLDHistoDecisionAdjust(DWORD *pulLDDecisionTable, BYTE ucBankAddress);
#endif
extern void ScalerColorLDPWMProcEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDPWMProcMode(EnumLDPWMProcMode enumPWMProcMode);
extern WORD ScalerColorLDPWMProcReadPWM(WORD usIndex);
extern void ScalerColorLDPWMProcReadPWMTable(WORD *pusPWMTable, WORD usPWMTableSize);
extern void ScalerColorLDPWMProcSramSwitchApply(void);
extern bit ScalerColorLDPWMProcSramSwitchStatus(bit bWaitPolling);
extern void ScalerColorLDPWMProcWritePWM(WORD usPWM, WORD usIndex);
extern void ScalerColorLDPWMProcWritePWMTable(WORD *pusPWMTable, WORD usPWMTableSize, BYTE ucBankNum);
#if(_HW_FORMAT_CONVERSION_FB_SUPPORT == _ON)
extern void ScalerColorLDPWMProcFrontBackEnable(bit bEnable);
extern bit ScalerColorLDPWMProcGetFrontBackEnable(void);
#endif
extern void ScalerColorLDPwmToSpiEnable(EnumFunctionOnOFF enumOn);
extern bit ScalerColorLDPwmToSpiCheckSramModeEnable(void);
extern bit ScalerColorLDPwmToSpiWaitToIdle(void);
extern bit ScalerColorLDPwmToSpiCheckSpiTransmitStatus(void);
extern void ScalerColorLDPwmToSpiAckSpiTransmitStatus(void);
extern void ScalerColorLDPwmToSpiSetUpdateSyncTriggerSource(EnumUpdSyncTriggerSrc enumUpdSyncTriggerSrc);
extern EnumUpdSyncTriggerSrc ScalerColorLDPwmToSpiGetUpdateSyncTriggerSource(void);
extern void ScalerColorLDPwmToSpiInitCommon(EnumUpdSyncTriggerSrc enumUpdSyncTriggerSrc);
extern void ScalerColorLDPwmToSpiSetSyncPulseWidth(DWORD ulValue);
extern void ScalerColorLDPwmToSpiSwapSpiOutput(bit bSwap);
extern bit ScalerColorLDPwmToSpiCheckUpdSyncApplyDone(void);
extern void ScalerColorLDPwmToSpiAckUpdSyncApplyDone(void);
extern bit ScalerColorLDStepHWDone(void);
extern void ScalerColorLDStepHWDoneClear(void);
#if(_HW_LOCAL_DIMMING_GEN_SEL == _HW_LOCAL_DIMMING_GEN1)
extern void ScalerColorLDHistoSetNewBlackMode(void);
extern void ScalerColorLDHistoSetWhiteTHD(BYTE ucTHD);
extern void ScalerColorLDHistoSetBlackTHD(BYTE ucTHD);
extern void ScalerColorLDHistoSetWhiteValue(WORD usWhiteValue);
extern void ScalerColorLDHistoSetBlackValue(WORD usBlackValue);
extern void ScalerColorLDHistoSetWhiteLUT(BYTE ucWhiteLUT);
extern void ScalerColorLDHistoSetBlackLUT(BYTE ucBlackLUT);
extern BYTE ScalerColorLDHistoGetBlackLUT(void);
#endif
extern void ScalerColorLDBLModelSetMode(EnumLDBLModelMode enumLDBLModelMode);
#if(_HW_LOCAL_DIMMING_EXTROINFO_SUPPORT == _ON)
extern void ScalerColorLDExtroInforEnable(bit bEnable);
extern void ScalerColorLDExtroInfo0Select(EnumExtroInfo enumExtroInfo);
extern void ScalerColorLDExtroInfo1Select(EnumExtroInfo enumExtroInfo);
extern void ScalerColorLDExtroInfo0TypeSelect(EnumLDExtroInfoType enumExtroInfotype);
extern void ScalerColorLDExtroInfo1TypeSelect(EnumLDExtroInfoType enumExtroInfotype);
extern void ScalerColorLDExtroInfoUpdateMode(EnumLDExtroInfoUpdMode enumExtroUPDMode);
extern bit ScalerColorLDExtroInfo0GetPermissionSwitch(void);
extern void ScalerColorLDExtroInfo0PermissionSwitchApply(void);
extern bit ScalerColorLDExtroInfo1GetPermissionSwitch(void);
extern void ScalerColorLDExtroInfo1PermissionSwitchApply(void);
extern void ScalerColorLDExtroInfoSetGroupRep(BYTE ucRepresentation);
extern void ScalerColorLDExtroInfoSetRegionDivisor(WORD usDivisor);
extern void ScalerColorLDExtroInfoSetPercentileTHD(BYTE ucTHD);
extern void ScalerColorLDExtroInfoReadInfo0(WORD *pusExtroInfoTable, WORD usTableSize);
extern void ScalerColorLDExtroInfoReadInfo1(WORD *pusExtroInfoTable, WORD usTableSize);
extern void ScalerColorLDExtroInfoInitial(void);
#endif
extern void ScalerColorLDPwmToSpiRunCallbackFunction(void);
extern void ScalerColorLDPwmToSpiSramModeTxDone_Handler(void);
extern void ScalerColorLDPwmToSpiSetSramModeControl(bit bEnable, EnumSModeClkSrc enumSModeClkSrc, EnumSModeIntEn enumSModeIntEn, EnumSModeTxTiming enumSModeTxTiming, bit bSModeUpdSyncApplyFromLDGainSync, bit bSModeUpdSyncApplyMethod, EnumSModeUpdSyncApplyTiming enumSModeUpdSyncApplyTiming);
extern void ScalerColorLDPwmToSpiTxForDimming(void);
extern void ScalerColorLDPwmToSpiTxForUpdSync(void);
extern void ScalerColorLDPwmToSpiStartTX(void);
extern void ScalerColorLDPwmToSpiManualApplyUpdSync(void);
extern void ScalerColorLDPwmToSpiNotifyBLModelSpiTxDone(void);
extern bit ScalerColorLDPwmToSpiGetNewSpiTxDoneFlag(void);
extern bit ScalerColorLDPwmToSpiPollingNewSpiTxDoneFlag(void);
extern void ScalerColorLDPwmToSpiAckNewSpiTxDoneFlag(void);
extern bit ScalerColorLDPwmToSpiCheckSpiIsBusy(void);
extern void ScalerColorLDPwmToSpiSetUpdSyncDeferCnt(DWORD ulDclkCnt);
extern void ScalerColorLDPwmToSpiSetCmdEntryConfig(EnumPwmToSpiInterface enumPwmToSpiInterface, DWORD ulConfigValue);
extern void ScalerColorLDPwmToSpiSetCmdEntryDummyByteNum(BYTE ucCmdEntryIdx, BYTE ucCmdEntryDummyByteNum);
extern void ScalerColorLDPwmToSpiSetCmdEntryDataRange(BYTE ucCmdEntryIdx, WORD usCmdEntryDataStartIndex, WORD usCmdEntryDataByteNumber);
extern void ScalerColorLDPwmToSpiGetCmdEntryDataRange(BYTE ucCmdEntryIdx, WORD *pusCmdEntryDataStartIndex, WORD *pusCmdEntryDataByteNumber);

#if(_LOCAL_DIMMING_UP_REGION_SUPPORT == _ON)
extern void ScalerColorLDPWMProcChangeHVRegionType(EnumPWMProcRegionType enumPWMProcRegionType);
#endif

#if(_DEVICE_LED_DRIVER_EXTERNAL_PWM != _NO_PWM)
extern void ScalerColorLDPwmToSpiAlignPwm0PeriodCnt(bit bAlignePwm0PeriodCnt);
extern void ScalerColorLDPwmToSpiSetPwm0PeriodCnt(WORD usPwm0PeriodCnt);
extern void ScalerColorLDPwmToSpiSetPwm0PeriodCntPulseDelay(WORD usPwm0PeriodCntPulseDelayCnt);
#endif

extern void ScalerColorLDSmoothEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDSmoothGainAdjust(BYTE ucGain);
extern void ScalerColorLDSmoothGainEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDSmoothMatrixAdjust(BYTE ucMatrixLevel, BYTE ucLocalDimmingSmoothParaSel);
extern void ScalerColorLDSmoothTuningAdjust(WORD usThresholdS, WORD usThresholdL);
extern void ScalerColorLDSmoothTuningEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDStepEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDStepFixPWMAdjust(WORD usFixPWM);
extern void ScalerColorLDStepFixPWMEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDStepInitilalPWMAdjust(WORD usInitialPWM);
extern void ScalerColorLDStepMode(EnumLDStepMode enumStepChangeMode);
extern void ScalerColorLDStepStepAdjust(WORD usMaxStep);
extern void ScalerColorLDStepTimerAdjust(WORD usMaxStep, WORD usMinStep, BYTE ucTimer);
extern void ScalerColorLDSmoothModify(WORD *pusApplyPWM, WORD *pusHistoPWM, BYTE ucLocalDimmingSmoothParaSel);
extern void ScalerColorLDStepChangeModify(WORD *pusApplyPWM, WORD *pusLastApplyPWM, WORD *pusHistoPWM, BYTE ucStepLevel, BYTE ucColorLDHistoLutMin, StructLocalDimmingBLMSoftClampPara stColorLocalDimmingBLMSoftClampPara, StructLocalDimmingPWMType *pstColorLocalDimmingPWMType);
extern void ScalerColorLDStepChangeModifyDirectType(WORD *pusApplyPWM, WORD *pusLastApplyPWM, WORD *pusHistoPWM, WORD *pusLastHistoPWM, BYTE ucStepLevel, EnumLDStepChangeType enumLDStepChangeType);
extern void ScalerColorLDOSDStepChange(WORD *pusApplyPWM, WORD *pusLastApplyPWM, BYTE ucOSDStepLevel);
extern void ScalerColorLDBLModelBoostGainAdjust(BYTE *pucLedGainTable, WORD usLength, BYTE ucBankAddress);
extern void ScalerColorLDBLModelBoostUniqueGainAdjust(DWORD ulUniqueGain);
extern BYTE ScalerColorLDPWMAbilityRatio(WORD *pusApplyPWM, WORD usRegion);
extern void ScalerColorLDSmoothRerangeEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDSmoothToMaxDisable(EnumFunctionOnOFF enumOn);
extern void ScalerColorLDSmoothShiftGain(void);
extern void ScalerColorLDSmoothShrinkGain(BYTE ucMatrixLevel);
extern void ScalerColorLocalDimmingIntHandle_EXINT0(void);
#if(_HW_FORMAT_CONVERSION_FB_SUPPORT == _ON)
extern bit ScalerColorLDGetFrontBackStatus(void);
#endif
#if(_LOCAL_DIMMING_SCENE_CHANGE_SUPPORT == _ON)
extern void ScalerColorLDHistoSetTHD(BYTE ucTHD);
#endif
#if(_LOCAL_DIMMING_BACKLIGHT_TYPE == _LOCAL_DIMMING_EDGE_BACKLIGHT)
extern EnumLDPWMSmoothPattern ScalerColorLDGetAdaptiveSmoothPattern(WORD *pusHistoPWM);
#endif
#endif

// Panel Uniformity
#if(_COLOR_IP_UNIFORMITY == _ON)
extern void ScalerColorIPUniformityAdjust(StructColorUniformitySetting *pstUniData);
extern void ScalerColorPanelUniformityInitial(void);
extern void ScalerColorPanelUniformityRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
extern void ScalerColorPanelUniformityAdjust(BYTE *pucUNILUT, DWORD ulUNILUTSize, BYTE ucBankNum, EnumUniformityModeSelect enumUniformityMode, EnumUniformityLevelSelect enumUniformityLevel);
extern void ScalerColorPanelUniformityDecayAdjust(BYTE *pucUNILUT, WORD usUNILUTSize, BYTE ucBankNum, EnumUniformityModeSelect enumUniformityMode, BYTE ucDecayDegree);
extern void ScalerColorPanelUniformityEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorPanelUniformityOffsetAdjust(BYTE *pucUNILUT, WORD usUNILUTSize, BYTE ucBankNum);
extern void ScalerColorPanelUniformityOffsetEnable(EnumFunctionOnOFF enumOn);
#if(_HW_PANEL_UNIFORMITY_DB_SRAM_MODE_SUPPORT == _ON)
extern void ScalerColorPanelUniformityDBModeEnable(bit bEnable);
extern void ScalerColorPanelUniformityDBModeApply(void);
extern void ScalerColorPanelUniformityDBModeSetSram(bit bSramSelect);
extern bit ScalerColorPanelUniformityDBModeApplyDone(void);
#if(_DYNAMIC_LOWBLUE_FUNCTION == _ON)
extern void ScalerColorPanelUniformityLowBlueLightInitial(void);
extern void ScalerColorPanelUniformityLowBlueAdjust(StructColorDynamicLowBluePara stColorDynamicLowBluePara);
extern void ScalerColorPanelUniformityLowBlueClearSram(WORD usLength);
#endif
#endif
#endif

#if(_COLOR_IP_P_GAMMA == _ON)
extern void ScalerColorIPPostGammaAdjust(EnumSelRegion enumSelRegion, StructColorPostGammaSetting *pstPostGammaSetting);
extern void ScalerColorPostGammaAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum);
extern void ScalerColorPostGammaEnable(EnumSelRegion enumSelRegion, EnumFunctionOnOFF enumOn);
extern void ScalerColorPostGammaRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorPostGammaSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
#endif
#endif

#if(_COLOR_IP_O_GAMMA == _ON)
extern void ScalerColorGammaRegionEnable(EnumSelRegion enumSelRegion, EnumDBApply enumDBApply, bit bOn);
extern void ScalerColorIPOutGammaAdjust(EnumSelRegion enumSelRegion, StructColorOutGammaSetting *pstOutGammaSetting);
extern void ScalerColorOutputGammaAdjust(EnumSelRegion enumSelRegion, BYTE *pucGammaTableArray, BYTE ucBankNum);
extern void ScalerColorOutputGammaAdjustSector(EnumSelRegion enumSelRegion, EnumGammaChannel enumChannel, BYTE *pucGammaTableArray, WORD usStartAddr, WORD usLength, BYTE ucBankNum);
extern void ScalerColorOutputGammaEnable(EnumFunctionOnOFF enumOn);
#if(_HW_D_DOMAIN_RGN_COUNT_MAX > 1)
extern void ScalerColorGammaSetEffectiveRegion(EnumHLWSetSel enumSetSel, EnumDBApply enumDBApply);
extern EnumHLWSetSel ScalerColorGammaGetEffectiveRegion(void);
#endif
#endif

// DDither
#if(_COLOR_IP_D_DITHER == _ON)
extern void ScalerColorDDitherAdjust(BYTE *pucDitherTable, BYTE *pucSeqTable, BYTE *pucTempoTable, BYTE ucBankAddress);
extern void ScalerColorDDitherAdvanceSettingAdjust(BYTE *pucReAlignTable, BYTE *pucReAlignTempoTable, BYTE *pucLsbTable, BYTE *pucAdvanceSettingTable, BYTE ucBankAddress);
extern void ScalerColorDDitherEnable(EnumFunctionOnOFF enumOn);
#endif

// D domain double buffer
extern bit ScalerColorWaitDDomainDBApply(void);

#if(_PCM_FUNCTION == _ON)
extern BYTE *ScalerColorsRGBBypassGetTableAddress(EnumSrgbBypassLut enumSrgbBypassLut);
extern BYTE ScalerColorsRGBBypassGetTableBank(void);
#endif

#if((_HW_CPU32_NOTIFY_INT_SUPPORT == _ON) && (_HW_CPU32_IS_BOOT_CPU != _TRUE) && (_SCPU_SUPPORT == _ON))
extern void ScalerColorScpuSyncHandler(void);
#if(_ADVANCED_HDR10_SUPPORT == _ON)
extern void ScalerColorCpuSyncIntNotifyAdvancedHDR10(EnumAdvancedHDR10Cpu32Stage enumAdvancedHDR10Cpu32Stage, EnumCpuSyncCommandTimeOut enumSyncCmdTypeTimeOut);
#endif
#endif

#if(_ADVANCED_HDR10_SUPPORT == _ON)
extern BYTE ScalerColorGetAdvancedHDR10InputGammaNorm(void);
extern void ScalerColorPCMHLWDBApply(EnumDBApply enumDBApply, EnumPCMHLWDBSel enumPCMHLWDBSel);
extern void ScalerColorAdvancedHDR10PCMHLWDBProc(EnumAdvancedHDR10PCMHLWDBStatus enumAdvancedHDR10PCMHLWDBStatus);
extern void ScalerColorAdvancedHDR10PCMHLWDBIntHandler_EXINT0(void);
#if(_IS_MAIN_PROCESS_CPU == _TRUE)
extern void ScalerColorAdvancedHDR10MainCpuPendSVCallback(void);
#endif
#endif

#if(_COLOR_IP_BORDER_WIN == _ON)
extern void ScalerColorBorderEnable(EnumBorderWin enumBorderWin, bit bTopBorderEn, bit bBottomBorderEn, bit bLeftBorderEn, bit bRightBorderEn, EnumDBApply enumDBApply);
#endif

#if(_COLOR_IP_MRCM == _ON)
extern void ScalerColorMRCMEnable(EnumFunctionOnOFF enumOn);
extern void ScalerColorMRCMSetting(StructMRCMData *pstMRCMData);
extern void ScalerColorMRCMSramSel(bit bSramSelect);
extern bit ScalerColorMRCMGetSramNumber(void);
extern bit ScalerColorMRCMReadyToRead(void);
extern void ScalerColorMRCMApply(void);
extern QWORD ScalerColorMRCMReadResult(EnumMRCMReadResultOption enumMRCMReadResultOption);
extern void ScalerColorMRCMReadRGBResult(BYTE ucMRCMRegion, EnumMRCMThdType enumMrcmThdType, StructMRCMRGBResult *pstMRCMRGBResult);
extern void ScalerColorMRCMPcmMode(EnumPCMModeSelect enumPCMModeSelect);
extern void ScalerColorMRCMRegionSelect(BYTE ucMRCMRegion);
#endif


#if(_EAGLE_SIGHT_SUPPORT == _ON)
#if(_EAGLE_SIGHT_CIRCLE_WIN_SUPPORT == _ON)
extern void ScalerColorIPCircleWindowAdjust(StructColorCircleWindowSetting *pstCircleWindowData, EnumDBApply enumDBApply);
extern void ScalerColorPIPBlendingSetCircleWindowEnable(bit bEnable, BYTE ucBorderWidth);
extern void ScalerColorPIPBlendingSetCircleWindowBorderEnable(bit bEnable);
#endif
#endif

#if(_COLOR_IP_ANTI_ALIASING == _ON)
extern void ScalerColorAntiAliasingSetIPEnable(bit bOn);
extern void ScalerColorAntiAliasingAdjust(DWORD *pulAntiAliasingSetting);
extern void ScalerColorAntiAliasingClear(void);
extern bit ScalerColorAntiAliasingGetSupport(EnumSelRegion enumSelRegion);
#endif

extern void ScalerColorGetAuthorize(BYTE *pucKey, BYTE *pucHash, BYTE ucHashSize);
extern WORD ScalerColorGetAuthorizeVersion(void);