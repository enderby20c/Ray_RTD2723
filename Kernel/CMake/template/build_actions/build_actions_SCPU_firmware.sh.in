#!/usr/bin/env bash
# Usage:
#   - event functions for building SCPU firmware

function pre_build() {
    # clean elf
    rm -f "@OUTPUT_DIR@/COMMON_FILES/@PROJECT_NAME@_SCPU.elf"

    # fix dependency file format for ninja
    ./helper.sh fix_dependency

    if [[ "@NO_LINK@" == "OFF" ]]; then
        # remove old location file
        if [[ -f "@PROJECT_LOCATION_FILE@" ]] ; then
            rm -f "@PROJECT_LOCATION_FILE@"
        fi

        # copy location file from 8051/KCPU
        if [[ -f "@OUTPUT_DIR@/COMMON_FILES/@PROJECT_NAME@.syms" ]] ; then
            cp -f \
                "@OUTPUT_DIR@/COMMON_FILES/@PROJECT_NAME@.syms" \
                "@PROJECT_LOCATION_FILE@"
        fi

        # from default content
        if [[ ! -f "@PROJECT_LOCATION_FILE@" ]] ; then
            echo "__LOC_FILE_END__ = 1;" > "@PROJECT_LOCATION_FILE@"
        fi
    fi
}

function pre_link() {
    # pre-process .ld template
    ./cpp_cmd.sh ld_template.ld > ld_template.ld.i

    "@WRAPPER_BIN@" ld_gen \
        --input-path ld_template.ld.i \
        --output-path "@OUTPUT_DIR@/COMMON_FILES/@PROJECT_NAME@_SCPU.ld"

    # generate wrap command
    if [[ -f "dump/actor_wrap.c.obj.dump" ]]; then
        grep '00000000 g *F.* __wrap_[A-Za-z_][A-Za-z0-9_]*$' dump/actor_wrap.c.obj.dump | \
            grep -o "__wrap_[^ ]*$" | \
            sed "s/__wrap_/--wrap=/" \
            > "actor_wrap_cmd.ld"
    fi
}

function post_build() {
    # dump firmware image
    @OBJCOPY@ \
        -O binary \
        --gap-fill 0xFF \
        -S \
        "@OUTPUT_DIR@/COMMON_FILES/@PROJECT_NAME@_SCPU.elf" \
        "@OUTPUT_DIR@/COMMON_FILES/firmware_image_SCPU.bin"

    # compress binary file
    lz4 -l -9 -f -q \
        "@OUTPUT_DIR@/COMMON_FILES/firmware_image_SCPU.bin" \
        "@OUTPUT_DIR@/COMMON_FILES/firmware_image_SCPU.bin.lz4"

    # generate location file
    "./@SCALER_NAME@_build_actions.sh" generate_scpu_syms

    # dump asm
    if [[ @CMAKE_BUILD_TYPE@ == "Debug" ]]; then
        ./helper.sh dump_asm \
            "@OUTPUT_DIR@/COMMON_FILES/@PROJECT_NAME@_SCPU.elf" \
            "@PROJECT_NAME@_SCPU"
    fi

    # print size info
    ./helper.sh size_info \
        "@OUTPUT_DIR@/COMMON_FILES" \
        "@PROJECT_NAME@_SCPU"
}

function clean_all() {
    cmake --build . --target clean

    # remove dump files
    rm -f dump/*.{dump,S}

    # remove stack usage files
    find CMakeFiles | grep "\.su$" | xargs rm -f
}


# actions
ACTION_ID=${1}
case ${ACTION_ID} in
    pre_build)
        pre_build
    ;;
    pre_link)
        pre_link
    ;;
    post_build)
        post_build
    ;;
    clean_all)
        clean_all
    ;;
esac
